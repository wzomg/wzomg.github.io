<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/images/tpbjt.jpg" alt="背景图1"></p>
<div class="note default no-icon">
            <p>引用的内容</p>
          </div>
<div class="note default no-icon">
            <p>表格文字居中样式</p><div class="table-container"><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">d</td></tr></tbody></table></div>
          </div>
<blockquote class="blockquote-center"><p>这是引用！</p>
</blockquote>
<details>
<summary>点击展开代码块</summary>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是代码块的测试</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span><br></pre></td></tr></table></figure>
</details>


<h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post/draft &quot;postName&quot;  #新建发布/草稿文章</span><br><span class="line">hexo new page &quot;pageName&quot; # 新建页面</span><br><span class="line">hexo generate # 生成静态页面至public目录</span><br><span class="line">hexo server # 启动服务器(默认端口4000，&apos;ctrl+c&apos;关闭server)</span><br><span class="line">hexo deploy # 远程部署项目</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version # 查看Hexo的版本</span><br><span class="line">hexo clean # 清除Hexo的缓存</span><br></pre></td></tr></table></figure>
<p><img src="/images/bgt.jpg" alt="背景图2"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂&amp;快速乘法取模例题汇总</title>
    <url>/posts/cf940335.html</url>
    <content><![CDATA[<h3 id="luogu-P1226-【模板】快速幂-取余运算"><a href="#luogu-P1226-【模板】快速幂-取余运算" class="headerlink" title="luogu P1226.【模板】快速幂||取余运算"></a>luogu P1226.【模板】快速幂||取余运算</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h4><blockquote>
<p>输入b，p，k的值，求 $b^p$  mod k的值。其中b，p，k * k为长整型数。</p>
</blockquote>
<a id="more"></a>
<h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><blockquote>
<p>三个整数b,p,k.</p>
</blockquote>
<h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><blockquote>
<p>输出“b^p mod k=s”，s为运算结果。</p>
</blockquote>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 10 9</span><br></pre></td></tr></table></figure>
<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2^10 mod 9=7</span><br></pre></td></tr></table></figure>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>特判一个坑点：1^0 mod 1 = 0。</p>
</blockquote>
<h4 id="AC代码1："><a href="#AC代码1：" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL a, b, mod;</span><br><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123; <span class="comment">//快速乘法取模</span></span><br><span class="line">    LL res = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (res + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b, LL mod)</span> </span>&#123; <span class="comment">//快速幂取模</span></span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = quick_mul(res, a, mod);</span><br><span class="line">        a = quick_mul(a, a, mod);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; mod) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"^"</span> &lt;&lt; b &lt;&lt; <span class="string">" mod "</span> &lt;&lt; mod &lt;&lt; <span class="string">"="</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0L</span>L &amp;&amp; mod == <span class="number">1L</span>L) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; quick_mod(a, b, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2："><a href="#AC代码2：" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tot = input().split()</span><br><span class="line">a = int(tot[<span class="number">0</span>])</span><br><span class="line">b = int(tot[<span class="number">1</span>])</span><br><span class="line">mod = int(tot[<span class="number">2</span>])</span><br><span class="line">print(str(a) + <span class="string">"^"</span> + str(b) + <span class="string">" mod "</span> +  str(mod) + <span class="string">"="</span> + str(pow(a, b, mod)))</span><br></pre></td></tr></table></figure>
<h3 id="luogu-T50035-我才是签到题"><a href="#luogu-T50035-我才是签到题" class="headerlink" title="luogu T50035 我才是签到题"></a>luogu T50035 我才是签到题</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>输入b，p，k的值，求 $ b^p $ mod k的值。</p>
</blockquote>
<h4 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h4><blockquote>
<p>输入三个整数b,p,k.</p>
</blockquote>
<h4 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h4><blockquote>
<p>输出答案</p>
</blockquote>
<h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 10 9</span><br></pre></td></tr></table></figure>
<h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>$ 0 \leq b, p &lt; 2^{63} $<br>$ 1 \leq k&lt; 2^{63} $</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>注意数据类型全开unsigned long long，同样特判：1^0 mod 1 = 0。</p>
</blockquote>
<h4 id="AC代码1：-1"><a href="#AC代码1：-1" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL a, b, mod;</span><br><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123; <span class="comment">//快速乘法</span></span><br><span class="line">    LL res = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =(res + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b, LL mod)</span> </span>&#123; <span class="comment">//快速幂取模</span></span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = quick_mul(res, a, mod);</span><br><span class="line">        a = quick_mul(a, a, mod);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; mod) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0L</span>L &amp;&amp; mod == <span class="number">1L</span>L) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; quick_mod(a % mod, b, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2：-1"><a href="#AC代码2：-1" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tot = input().split()</span><br><span class="line">a = int(tot[<span class="number">0</span>])</span><br><span class="line">b = int(tot[<span class="number">1</span>])</span><br><span class="line">mod = int(tot[<span class="number">2</span>])</span><br><span class="line">print(pow(a, b, mod))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>快速幂&amp;快速乘法取模</tag>
      </tags>
  </entry>
  <entry>
    <title>威尔逊定理例题汇总</title>
    <url>/posts/54c860b1.html</url>
    <content><![CDATA[<h3 id="hdu-5391-Zball-in-Tina-Town"><a href="#hdu-5391-Zball-in-Tina-Town" class="headerlink" title="hdu 5391 Zball in Tina Town"></a>hdu 5391 Zball in Tina Town</h3><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>Tina Town is a friendly place. People there care about each other.<br>Tina has a ball called zball. Zball is magic. It grows larger every day. On the first day, it becomes 1 time as large as its original size. On the second day,it will become 2 times as large as the size on the first day. On the n-th day,it will become n times as large as the size on the (n-1)-th day. Tina want to know its size on the (n-1)-th day modulo n.</p>
</blockquote>
<a id="more"></a>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line of input contains an integer T, representing the number of cases.<br>The following T lines, each line contains an integer n, according to the description.<br>$ T \leq 10^5,2 \leq n \leq 10^9 $</p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each test case, output an integer representing the answer.</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>求 $ (n-1)! \; mod \; n $。注意：特判 n = 4 时，$ ans = 2 $。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t))&#123;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">4</span>) <span class="built_in">puts</span>(<span class="string">"2"</span>); <span class="comment">//特判 6 ≡ 2(mod 4)</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(check(n)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - <span class="number">1</span>); <span class="comment">//如果是素数，那么取模之后为n-1，其余情况下余数为0</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-2973-YAPTCHA"><a href="#hdu-2973-YAPTCHA" class="headerlink" title="hdu 2973 YAPTCHA"></a>hdu 2973 YAPTCHA</h3><h4 id="Problem-Description-1"><a href="#Problem-Description-1" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>The math department has been having problems lately. Due to immense amount of unsolicited automated programs which were crawling across their pages, they decided to put Yet-Another-Public-Turing-Test-to-Tell-Computers-and-Humans-Apart on their webpages. In short, to get access to their scientific papers, one have to prove yourself eligible and worthy, i.e. solve a mathematic riddle.<br>However, the test turned out difficult for some math PhD students and even for some professors. Therefore, the math department wants to write a helper program which solves this task (it is not irrational, as they are going to make money on selling the program).<br>The task that is presented to anyone visiting the start page of the math department is as follows: given a natural n, compute</p>
<script type="math/tex; mode=display">
S_n = \sum_{k=1}^n \left[\frac{(3k+6)!+1}{3k+7}-\left[\frac{(3k+6)!}{3k+7}\right] \right]</script><p>where $ [x] $ denotes the largest integer not greater than x.</p>
</blockquote>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line contains the number of queries  t $ (t \leq 10^6) $. Each query consist of one natural number n $ (1 \leq n \leq 10^6) $.</p>
</blockquote>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each n given in the input output the value of $ S_n $.</p>
</blockquote>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">100</span><br><span class="line">1000</span><br><span class="line">10000</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">28</span><br><span class="line">207</span><br><span class="line">1609</span><br></pre></td></tr></table></figure>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>威尔逊定理：$ (p-1)! \equiv -1\;(mod\;p) \Leftrightarrow (p-1)!+1 \equiv 0 \;(mod\;p) $。<br>①当 $ 3k + 7 $ 是素数时，$ (3k+7)|[(3k+6)!+1] $，令 $ m=\frac{(3k+6)!+1}{3k+7} $，<br>则 $ \left [ \frac{(3k+6)!}{3k+7}  \right ] = \left [ \frac{m(3k+7)-1}{3k+7} \right ] = \left [ m-\frac{1}{3k+7} \right ] = m-1 $，<br>此时，$ T_k = \left [ m - (m-1) \right ] =1 $；<br>②当 $ 3k + 7 (\ge10)$ 是合数时，由威尔逊定理的相关证明可知当 $ p &gt; 4 $ 且p为合数时，$ (p-1)! \equiv 0 \;(mod \; p) $，令 $ m=\frac{(3k+6)!}{3k+7} $，则 $ \frac{(3k+6)!+1}{3k+7} = \frac{m(3k+7)+1}{3k+7} = m+\frac{1}{3k+7} $，<br>此时，$ T_k = \left [ m+\frac{1}{3k+7}-m  \right ] = \left [ \frac{1}{3k+7} \right ] = 0 $。n最大只有 $ 10^6 $，预处理打表即可。</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[maxn]; <span class="keyword">int</span> T, n, cnt = <span class="number">0</span>, prime[maxn], ans[maxv];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler_sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="keyword">sizeof</span>(isp));</span><br><span class="line">    <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span>(prime));</span><br><span class="line">    isp[<span class="number">0</span>] = isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i]) prime[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt; maxn; ++j)&#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    euler_sieve();</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxv; ++i)&#123; <span class="comment">//预处理，求1~n范围内，3 * i + 7 是素数的个数</span></span><br><span class="line">        <span class="keyword">if</span>(isp[<span class="number">3</span> * i + <span class="number">7</span>]) ans[i] = ans[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[i] = ans[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T)&#123;</span><br><span class="line">        <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>威尔逊定理</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂&amp;快速乘法取模模板</title>
    <url>/posts/daf04bcb.html</url>
    <content><![CDATA[<h4 id="快速乘法取模：-O-log-b"><a href="#快速乘法取模：-O-log-b" class="headerlink" title="快速乘法取模：$O(log^b) $"></a>快速乘法取模：$O(log^b) $</h4><a id="more"></a>
<blockquote>
<p>举个栗子：<script type="math/tex">3 \times 11 = 3 \times (1011)_2 = 3  \times [(1000)_2 + (000)_2 + (10)_2 + (1)_2 ]</script><br>$ = 3  \times [8 + 0 + 2 + 1] = 33 $。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123;  </span><br><span class="line">    LL res = <span class="number">0L</span>L; <span class="comment">//注意初始值为0</span></span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =(res + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="快速幂取模：-O-log-b"><a href="#快速幂取模：-O-log-b" class="headerlink" title="快速幂取模：$O(log^b) $"></a>快速幂取模：$O(log^b) $</h4><blockquote>
<p>举个栗子：$3^{11} = 3^{(1011)_2}=3^{(1000)_2}\times 3^{(000)_2}\times 3^{(10)_2} \times 3^{(1)_2}= 3^8\times 3^0\times 3^2\times 3^1$</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123;  <span class="comment">//快速乘法取模</span></span><br><span class="line">    LL res = <span class="number">0L</span>L; <span class="comment">//注意初始值为0</span></span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =(res + a) % mod;</span><br><span class="line">        a = (a + a) % mod; <span class="comment">//每次扩大2倍</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b, LL mod)</span> </span>&#123; <span class="comment">//快速幂取模</span></span><br><span class="line">    LL res = <span class="number">1L</span>L; <span class="comment">//注意初始值为1</span></span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = quick_mul(res, a, mod);</span><br><span class="line">        <span class="comment">// res = res * a % mod;</span></span><br><span class="line">        a = quick_mul(a, a, mod);</span><br><span class="line">        <span class="comment">//a = a * a % mod;</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM模板</category>
      </categories>
      <tags>
        <tag>快速幂&amp;快速乘法取模</tag>
      </tags>
  </entry>
  <entry>
    <title>数论笔记整理1</title>
    <url>/posts/cd54672d.html</url>
    <content><![CDATA[<h4 id="同余定理："><a href="#同余定理：" class="headerlink" title="同余定理："></a>同余定理：</h4><blockquote>
<p>给定一个正整数 $ m $，如果两个整数 $ a $ 和 $ b $ 满足 $ a-b $ 能够被 $ m $ 整除，即 $\frac{a-b}{m} $ 为一个整数，那么就称整数 $ a $ 与 $ b $ 对模 $ m $ 同余，记作 $ a \equiv b \;(mod \; m) $。对模 $ m $ 同余是整数的一个等价关系。（自反、对称、传递）</p>
</blockquote>
<a id="more"></a>
<h5 id="性质与证明："><a href="#性质与证明：" class="headerlink" title="性质与证明："></a>性质与证明：</h5><h6 id="1、自反性：-a-equiv-a-mod-m-；"><a href="#1、自反性：-a-equiv-a-mod-m-；" class="headerlink" title="1、自反性：$ a \equiv a \;(mod\;m) $；"></a>1、自反性：$ a \equiv a \;(mod\;m) $；</h6><h6 id="2、对称性：若-a-equiv-b-mod-m-，则-b-equiv-a-mod-m-；"><a href="#2、对称性：若-a-equiv-b-mod-m-，则-b-equiv-a-mod-m-；" class="headerlink" title="2、对称性：若 $ a \equiv b \; (mod \; m)$，则 $ b\equiv a \;(mod \; m) $；"></a>2、对称性：若 $ a \equiv b \; (mod \; m)$，则 $ b\equiv a \;(mod \; m) $；</h6><h6 id="3、传递性：若-a-equiv-b-mod-m-，-b-equiv-c-mod-m-，则-a-equiv-c-mod-m-；"><a href="#3、传递性：若-a-equiv-b-mod-m-，-b-equiv-c-mod-m-，则-a-equiv-c-mod-m-；" class="headerlink" title="3、传递性：若 $ a \equiv b \; (mod \; m) $，$ b \equiv c \; (mod \; m) $，则 $ a \equiv c \;(mod \; m) $；"></a>3、传递性：若 $ a \equiv b \; (mod \; m) $，$ b \equiv c \; (mod \; m) $，则 $ a \equiv c \;(mod \; m) $；</h6><h6 id="4、同余式相加：若-a-equiv-b-mod-m-，-c-equiv-d-mod-m-，-则-a-pm-c-equiv-b-pm-d-mod-m-；"><a href="#4、同余式相加：若-a-equiv-b-mod-m-，-c-equiv-d-mod-m-，-则-a-pm-c-equiv-b-pm-d-mod-m-；" class="headerlink" title="4、同余式相加：若 $ a \equiv b \; (mod \; m) $，$ c \equiv d \; (mod \; m) $， 则 $ a \pm c \equiv b \pm d \; (mod \; m) $；"></a>4、同余式相加：若 $ a \equiv b \; (mod \; m) $，$ c \equiv d \; (mod \; m) $， 则 $ a \pm c \equiv b \pm d \; (mod \; m) $；</h6><blockquote>
<p>证明： $ a \equiv b \; (mod \; m) $，$ c \equiv d \; (mod \; m) \Rightarrow m | ( a - b ) $ , $ m | (c - d) $<br>$ \Rightarrow  m|[(a - b) \pm (c - d)] \Rightarrow m | [(a \pm b) - (c \pm d)] \Rightarrow a \pm c \equiv b \pm d \; (mod \; m) $.</p>
</blockquote>
<h6 id="5、同余式相乘：若-a-equiv-b-mod-m-，-c-equiv-d-mod-m-，-则-ac-equiv-bd-mod-m"><a href="#5、同余式相乘：若-a-equiv-b-mod-m-，-c-equiv-d-mod-m-，-则-ac-equiv-bd-mod-m" class="headerlink" title="5、同余式相乘：若 $ a \equiv b \; (mod \; m) $，$ c \equiv d \; (mod \; m) $， 则 $ ac \equiv bd \; (mod \; m) $."></a>5、同余式相乘：若 $ a \equiv b \; (mod \; m) $，$ c \equiv d \; (mod \; m) $， 则 $ ac \equiv bd \; (mod \; m) $.</h6><blockquote>
<p>证明：因为 $ ac - bd = ac - bc + bc - bd = c(a - b) + b(c - d) $ ，且 $ m | ( a - b ) $ , $ m | (c - d) $，所以 $ m | (ac - bd) $ ，即 $ ac \equiv bd \; (mod \; m) $.</p>
</blockquote>
<h6 id="6、除法：若-ac-equiv-bc-mod-m-，-c-neq-0-，则-a-equiv-b-mod-frac-m-gcd-c-m"><a href="#6、除法：若-ac-equiv-bc-mod-m-，-c-neq-0-，则-a-equiv-b-mod-frac-m-gcd-c-m" class="headerlink" title="6、除法：若 $ ac \equiv bc \; (mod \; m) $ ，$ c \neq 0 $，则 $ a \equiv b \; (mod \; \frac{m}{gcd(c, m)}) $."></a>6、除法：若 $ ac \equiv bc \; (mod \; m) $ ，$ c \neq 0 $，则 $ a \equiv b \; (mod \; \frac{m}{gcd(c, m)}) $.</h6><blockquote>
<p>特殊地，若 $ gcd(c, m) = 1 $ 时，则 $ a \equiv b \; (mod \; m) $.<br>举个栗子：$ 14 \equiv 6 \;(mod \; 8) \Rightarrow 7 \equiv 3 \;(mod \;4) $，此时 $ gcd(14, 8) = 2 $。</p>
</blockquote>
<h6 id="7、幂运算：若-a-equiv-b-mod-m-，则-a-n-equiv-b-n-mod-m"><a href="#7、幂运算：若-a-equiv-b-mod-m-，则-a-n-equiv-b-n-mod-m" class="headerlink" title="7、幂运算：若 $ a \equiv b \; (mod \; m) $，则 $ a^n \equiv b^n \; (mod \; m) $."></a>7、幂运算：若 $ a \equiv b \; (mod \; m) $，则 $ a^n \equiv b^n \; (mod \; m) $.</h6><blockquote>
<p>说明：左边每个数取模m都同余于对应右边的每一个数，显然等式恒成立。</p>
</blockquote>
<h6 id="8、若-a-equiv-b-mod-m-，-n-m-，则-a-equiv-b-mod-n"><a href="#8、若-a-equiv-b-mod-m-，-n-m-，则-a-equiv-b-mod-n" class="headerlink" title="8、若 $ a \equiv b \; (mod \; m)$，$ n | m $，则 $ a \equiv b \; (mod \; n) $."></a>8、若 $ a \equiv b \; (mod \; m)$，$ n | m $，则 $ a \equiv b \; (mod \; n) $.</h6><h6 id="9、若-a-equiv-b-mod-m-i-，-i-1-2-cdots-k-则-a-equiv-b-mod-m-1-m-2-cdots-m-k-。"><a href="#9、若-a-equiv-b-mod-m-i-，-i-1-2-cdots-k-则-a-equiv-b-mod-m-1-m-2-cdots-m-k-。" class="headerlink" title="9、若 $ a \equiv b \; (mod \; m_i)$，$ (i = 1, 2, \cdots k) $, 则 $ a \equiv b \; (mod \; [m_1, m_2, \cdots, m_k])$。"></a>9、若 $ a \equiv b \; (mod \; m_i)$，$ (i = 1, 2, \cdots k) $, 则 $ a \equiv b \; (mod \; [m_1, m_2, \cdots, m_k])$。</h6><blockquote>
<p>其中 $ [m_1, m_2, \cdots, m_k] $ 表示 $ m_1, m_2, \cdots, m_k $ 的最小公倍数。</p>
</blockquote>
<h5 id="同余转换："><a href="#同余转换：" class="headerlink" title="同余转换："></a>同余转换：</h5><blockquote>
<p>$ (a \pm  b) \; mod \; p = (a \; mod \; p \pm  b \; mod \; p) \; mod \; p $；</p>
<p><script type="math/tex">(a * b) \; mod \; p = (a \; mod \; p * b \; mod \; p) \; mod \; p</script>；<br><del>除运算：</del>$ (a / b) \; mod \; p = [(a \; mod \; p) / (b \; mod \; p)] \; mod \; p $，<code>要用乘法逆元!!!</code><br>举个栗子：<br>$ (100 / 50) \; mod \; 20 == 2 \neq [(100 \; mod \; 20) / (50 \; mod \; 20)] \; mod \; 20 == 0 $.</p>
</blockquote>
<h4 id="欧几里德算法：（辗转相除法）"><a href="#欧几里德算法：（辗转相除法）" class="headerlink" title="欧几里德算法：（辗转相除法）"></a>欧几里德算法：（辗转相除法）</h4><blockquote>
<p>定义：求整数a和b的最大公约数，其中a、b不全为0.<br>定理：设 $ a = qb + r $， 其中 $ a, b, q, r \in \mathbb{Z} $， 则 $ gcd(a, b) = gcd(b, r)$.<br>证明：若d是a和b的公因子，即 $ d | a \land d | b $，则 $ d | b \land d | [r = (a - qb)]$；<br>若d是b和r的公因子，即 $ d | b \land d | r $，则 $ d | (qb + r) $，即 $ d | a $.<br>于是， a和b的公因子集合与b和r的公因子集合相同。继而，其最大公因子相同，即证。<br><code>备注：任意一个非0整数和0的约数是该整数的所有约数，最大公约数为其本身。因为0被任意一个非0整数整除，所以任意一个非0整数都是0的约数。</code></p>
</blockquote>
<h4 id="贝祖定理："><a href="#贝祖定理：" class="headerlink" title="贝祖定理："></a>贝祖定理：</h4><blockquote>
<p>定理：$ \forall \; a, b \in \mathbb{Z} $，$ \exists \; x, y \in \mathbb{Z} $，使得 $ ax + by = gcd(a, b) $.<br>证明：若 $ ax + by = d = gcd(a, b) $，则 $ d | a, d | b $，<br>即 $ \forall \; x, y \in \mathbb{Z} $，都有 $ d | (ax + by) $。因此，一定存在整数解x、y。<br>设 $ s $ 是 <script type="math/tex">Q::=\{h \in \mathbb{Z}| h = ax + by</script>，其中 <script type="math/tex">a, b, x, y \in \mathbb{Z}\}</script>中的最小正整数，<br>即 $ \exists \; x_0, y_0 \in \mathbb{Z} $，有 $ s = ax_0 + by_0 $。<br>设 $ q = \left \lfloor \frac{a}{s} \right \rfloor $，则 $ r = a \; mod \; s = a - qs = a - q(ax + by) $<br>$= a(1 - qx) + b(-qy) \Rightarrow r \in Q $。又 $ 0 \leq r &lt; s $，所以 $ r = 0 \Rightarrow  s | a $。<br>同理 $ s | b $，说明s是a和b的公约数，则 $ s \leq d $。<br>因为 $ \forall \; x, y \in \mathbb{Z} $，都有 $ d | (ax + by) \Rightarrow d |(x_0 + y_0) = d | s $，则 $ d \leq s $，所以 $ s = d = gcd(a, b) $，即证。由此还可知 $ \forall \; a, b \in \mathbb{Z} $，$ gcd(a, b) $ 是线性组合 $ (ax + by) $ 的最小正整数。</p>
</blockquote>
<h4 id="裴蜀定理："><a href="#裴蜀定理：" class="headerlink" title="裴蜀定理："></a>裴蜀定理：</h4><blockquote>
<p>$ \forall \; a, b \in \mathbb{Z} $，方程 $ ax + by = c $ 有整数解，当且仅当 $ gcd(a, b)|c $。<br>证明：充分性：设 $ d = gcd(a, b) $，由贝祖定理可知一定有整数解 $ x_0, y_0 $ 使得 $ ax_0 + by_0 = d $。因为 $ d | c $，所以 $ \exists k \in \mathbb{Z} $，使得 $ c = kd = k(ax_0 + by_0) $<br>$ = a(kx_0) + b(ky_0) $，即方程有整数解 $ kx_0, ky_0 $。<br>必要性：$ \exists \; x_1, y_1 \in \mathbb{Z} $，使得 $ ax_1 + by_1 = c $，设 $ d = gcd(a, b) $，则 $ d | a, d | b $<br>$ \Rightarrow d | (ax_1 + by_1) \Rightarrow d | c $，即证。</p>
</blockquote>
<h4 id="扩展欧几里得算法："><a href="#扩展欧几里得算法：" class="headerlink" title="扩展欧几里得算法："></a>扩展欧几里得算法：</h4><blockquote>
<p>定义：在已知a, b求解一组x，y，使它们满足贝祖等式： $ ax + by = gcd(a, b) = d $（解一定存在）。由欧几里德算法得 $ gcd(a, b) = gcd(b, a \; mod \; b) $，<br>则 <script type="math/tex">ax + by = bx_1 + (a - a / b * b)y_1 = ay_1 + b(x_1 - a / b * y_1)</script>，<br>即 $ x = y_1, y = x_1 - a / b * y_1 $。</p>
</blockquote>
<h4 id="乘法逆元："><a href="#乘法逆元：" class="headerlink" title="乘法逆元："></a>乘法逆元：</h4><blockquote>
<p>若 $ ax \equiv 1(mod \; m) $，则称x是模m意义下a的乘法逆元。记 $ x =inv(a) $ 或 $ x = a^{−1} $。<br>注意：$ gcd(a, m) = 1 $ 。<br>求法：①将方程转化为 $ ax - my = 1 $，然后用扩展欧几里得算法求解即可。<br>②根据欧拉定理：若 $a,m \in \mathbb{N}^+ \land \gcd(a,m) =1 $，则 $ a^{\varphi(m)} \equiv 1\;(mod\;m)$；根据同余式可乘性质可得 $ a^{\varphi(m)} \times a^{-1} \equiv 1 \times a^{-1} \;(mod\;p) \Rightarrow a^{-1} \equiv a^{\varphi(m)-1} \;(mod\;p)$，即 $ inv(a) = a^{\varphi(m)-1} \;(mod\;p)$，然后用整数快速幂取模求解即可！<br>③线性求 $ 1\sim p-1 $ 的乘法逆元：时间复杂度是 $ O(p) $。注意：p是素数。<br>推导如下：首先，$1^{-1} \equiv 1\;(mod\;p)$。<br>那么 $ \forall \;i \in [2,p-1]$，必 $\exists\; k,r$，使得 $ p=k \times i + r$，其中 $ k,r \in \mathbb{Z}  \land r &lt; i$。<br>$\because  p \equiv 0\;(mod\;p) $，$\therefore k \times i + r \equiv 0\;(mod\;p)$，<br>恒等式两边同乘以 $ i^{-1} \cdot r^{-1} $ 得 $ k\cdot r^{-1} + i^{-1} \equiv 0 \;(mod\; p) $<br>$ \Rightarrow i^{-1} \equiv -k\cdot r^{-1} \;(mod\; p) \Rightarrow i^{-1} \equiv (p-\left\lfloor\frac{p}{i}\right\rfloor)\cdot \left(p\bmod i\right)^{-1} \;(mod \;p) $（取正整数）。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉函数</title>
    <url>/posts/f60286b9.html</url>
    <content><![CDATA[<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><blockquote>
<p>对于正整数n，欧拉函数是小于n的正整数中与n互质的数的个数$(\varphi(1)=1)$。此函数以其首名研究者欧拉命名，它又称为$\varphi$函数、欧拉商数等。举个栗子：$\varphi(8)=4$，因为1,3,5,7均和8互质。</p>
</blockquote>
<a id="more"></a>
<h4 id="性质与证明："><a href="#性质与证明：" class="headerlink" title="性质与证明："></a>性质与证明：</h4><h5 id="①通式：-varphi-x-x-prod-i-1-k-1-frac-1-p-i-x-1-frac-1-p-1-1-frac-1-p-2-cdots-1-frac-1-p-k"><a href="#①通式：-varphi-x-x-prod-i-1-k-1-frac-1-p-i-x-1-frac-1-p-1-1-frac-1-p-2-cdots-1-frac-1-p-k" class="headerlink" title="①通式：$ \varphi (x) = x\prod _{i = 1}^{k} (1 - \frac{1}{p_i}) = x(1 - \frac{1}{p_1})(1 - \frac{1}{p_2})\cdots (1 - \frac{1}{p_k}) $."></a>①通式：$ \varphi (x) = x\prod _{i = 1}^{k} (1 - \frac{1}{p_i}) = x(1 - \frac{1}{p_1})(1 - \frac{1}{p_2})\cdots (1 - \frac{1}{p_k}) $.</h5><blockquote>
<p>其中 <script type="math/tex">p_1, p_2, \cdots, p_n</script> 为x的所有素因子，<script type="math/tex">x > 1</script> 且 <script type="math/tex">x \in N^+</script>，规定 $ \varphi(1) = 1 $（唯一与1互质的数就是1本身）。 注意：每种素因子只有一个。<br>证明思路：讨论x的所有素因子 <script type="math/tex">p_i</script> ，只要是 <script type="math/tex">p_i</script> 的倍数的数都不是x的互质数。<br>用容斥定理证明：  <script type="math/tex">A\cup B \cup C = A + B + C - A \cap B - B \cap C - C \cap A + A \cap B \cap C</script>.<br>1)、若x是素数，则 <script type="math/tex">\varphi(x) = x - 1</script>.<br>证明：因为素数x的质因子只有1和它本身，而x和x不互质，所以 <script type="math/tex">\varphi(x) = x - 1</script>.<br>2)、若x不是素数，则只需除去x的质因子<script type="math/tex">p_i</script> 和 <script type="math/tex">p_i</script>的倍数的数即可。<br>设x的所有素因子为 <script type="math/tex">p_1, p_2, \cdots, p_k</script>，根据容斥原理得：与x不互质的数的个数为：<script type="math/tex">\frac{x}{p_1} + \frac{x}{p_2} + \cdots \frac{x}{p_k} - \frac{x}{p_1p_2} - \frac{x}{p_1p_k} - \cdots - \frac{x}{p_{k-1}p_k} + \cdots</script><br>（注：每个分式的符号由该分式的分母中素数的个数来决定：奇加偶减）<br>则与x互质的数的个数为：  <script type="math/tex">x - (\frac{x}{p_1} + \frac{x}{p_2} + \cdots \frac{x}{p_k} - \frac{x}{p_1p_2} - \frac{x}{p_1p_k} - \cdots - \frac{x}{p_{k-1}p_k} + \cdots)</script>  </p>
<p><script type="math/tex">= x(1 - \frac{1}{p_1})(1 - \frac{1}{p_2})\cdots (1 - \frac{1}{p_k}) = \varphi (x) = x\prod _{i = 1}^{k} (1 - \frac{1}{p_i})</script>，即证。</p>
</blockquote>
<h5 id="②若n为素数p的k次幂，则有-varphi-n-varphi-p-k-p-k-1-frac-1-p-p-k-p-k-1-p-1-p-k"><a href="#②若n为素数p的k次幂，则有-varphi-n-varphi-p-k-p-k-1-frac-1-p-p-k-p-k-1-p-1-p-k" class="headerlink" title="②若n为素数p的k次幂，则有 $ \varphi (n) = \varphi (p^k) = p^k(1-\frac{1}{p}) = p^k - p^{k-1} = (p - 1)p^k $."></a>②若n为素数p的k次幂，则有 $ \varphi (n) = \varphi (p^k) = p^k(1-\frac{1}{p}) = p^k - p^{k-1} = (p - 1)p^k $.</h5><blockquote>
<p>证明：因为除了 $ p $ 的倍数外，其他数都与n互质。根据容斥原理得 $ \varphi (n) = $ 总数 - $p$ 的倍数的个数 = $ (p^k - 1) - (\frac{p^k}{p} - 1) = p^k - p^{k -1} = (p - 1)p^k$ ，即证。</p>
</blockquote>
<h5 id="③欧拉函数是积性函数，但不是完全积性函数。"><a href="#③欧拉函数是积性函数，但不是完全积性函数。" class="headerlink" title="③欧拉函数是积性函数，但不是完全积性函数。"></a>③欧拉函数是积性函数，但不是完全积性函数。</h5><blockquote>
<p>若m与n互质，则$ \varphi(mn) = \varphi(m)\varphi(n)$.<br>特殊地，当m=2，若n为奇数时，$ \varphi(2n)= \varphi(n)$.<br>证明：因为m与n互质，所以它们没有公共的质因子。<br>设m有<script type="math/tex">a_m</script>个质因子，n有<script type="math/tex">a_n</script>个质因子，则有 </p>
<p><script type="math/tex">\varphi (m) \varphi (n) = mn \prod _{i = 1}^{a_m} (1 - \frac{1}{p_i})\prod _{i = 1}^{a_n} (1 - \frac{1}{p_i}) = mn \prod _{i = 1}^{a_m + a_n}(1 - \frac{1}{p_i}) = \varphi (mn)</script>.<br>换句话说：只有那些既满足m与其互质且也满足n与其互质的数才满足条件。<br>根据乘法原理，这些数可以互相组合，则有 <script type="math/tex">\varphi(m)\varphi(n)</script>个，即证。<br>积性函数的性质：若将n表示成质因子分解式：<script type="math/tex">n = p_1^{a_1}p_2^{a_2} \cdots p_k^{a_k}</script>，则有 <script type="math/tex">\varphi(n) = \varphi(p_1^{a_1})\varphi(p_2^{a_2}) \cdots \varphi(p_k^{a_k})</script>.</p>
</blockquote>
<h5 id="④小于n且为n的互质数之和为-sum-i-1-n-i-gcd-n-i-1-frac-n-varphi-n-2-。"><a href="#④小于n且为n的互质数之和为-sum-i-1-n-i-gcd-n-i-1-frac-n-varphi-n-2-。" class="headerlink" title="④小于n且为n的互质数之和为 \sum_{i=1}^n i*[gcd(n, i)==1] = \frac{n*\varphi(n)}{2}。"></a>④小于n且为n的互质数之和为 <script type="math/tex">\sum_{i=1}^n i*[gcd(n, i)==1] = \frac{n*\varphi(n)}{2}</script>。</h5><blockquote>
<p>证明用到一个推论：若 $ gcd(n, i) = 1 $，则 $ gcd(n, n-i) = 1 $（设$n &gt; i$)。<br>下面证明这个推论：用反证法证明：假设 $ \exists k \neq 1 $，使 $gcd(n, n-i) = k $ 成立，即<br>$gcd(n, n-i) = k \Rightarrow (k|n) \land (k|(n-i)) \Rightarrow (k|n) \land (k|i) \Rightarrow gcd(n, i) = k \neq 1 $，<br>显然这与条件相矛盾，所以假设不成立，即原命题正确。<br>于是问题求解变得非常简单： 通过上面的推论可知 i 和 n-i 总是成对出现，且和是n，<br>即与n互质的所有数之和为 <script type="math/tex">\sum_{i = 1}^n i*[gcd(n, i) == 1] = \frac{n*\varphi(n)}{2}</script><br>下面讨论在 $ gcd(n, i) = gcd(n, n - i) = 1 $ 的前提下，是否会出现 $ n - i == i$ 时而导致重复计算呢？<br>分两种情况来讨论：<br>1)、若n为奇数，因为 <script type="math/tex">n \neq 2 * i</script>，所以不存在<script type="math/tex">n-i=i</script>时导致的重复计算；<br>2)、若n为偶数，则 <script type="math/tex">n = 2 * i</script>， <script type="math/tex">[gcd(n,\frac{n}{2}) = \frac{n}{2}] | n</script>.<br>当且仅当 $ n = 2 $ 时，$ gcd(n, \frac{n}{2}) = \frac{n}{2} = 1$，<br>此时 <script type="math/tex">\sum_{i = 1}^2 i * [gcd(2, i) == 1] = \frac{2*1}{2} = 1</script>，显然不会重复计算；而对于 $ n &gt; 2 $ 的偶数，$ gcd(n, \frac{n}{2}) = \frac{n}{2} \neq 1$，显然不满足原条件，更别说重复计算了，即证。</p>
</blockquote>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>a、积性函数：对于任意互质的整数a和b有性质$f(ab)=f(a)f(b)$ 的数论函数。<br>b、完全积性函数：对于任意整数a和b有性质$f(ab)=f(a)f(b)$ 的数论函数。<br>c、在数论上，算术函数（数论函数）指定义域为正整数、陪域为复数的函数，每个算术函数都可视为复数的序列。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<p>121131231</p>
]]></content>
  </entry>
  <entry>
    <title>欧拉函数模板</title>
    <url>/posts/ee22c535.html</url>
    <content><![CDATA[<h3 id="两种求解方法！"><a href="#两种求解方法！" class="headerlink" title="两种求解方法！"></a>两种求解方法！</h3><a id="more"></a>
<h4 id="快速求欧拉函数：-O-sqrt-n"><a href="#快速求欧拉函数：-O-sqrt-n" class="headerlink" title="快速求欧拉函数：$ O(\sqrt{n}) $"></a>快速求欧拉函数：$ O(\sqrt{n}) $</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">LL n;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res = x; <span class="comment">//初始值</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>); <span class="comment">//先除后乘，避免数据过大</span></span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>); <span class="comment">//若x大于1，则剩下的x必为素因子</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; get_Euler(n) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//求n的互质数的个数</span></span><br><span class="line">        cout &lt;&lt; n * get_Euler(n) / 2 &lt;&lt; endl; //求n的所有互质数之和</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="埃氏筛法预处理打表：-O-nlog-log-n"><a href="#埃氏筛法预处理打表：-O-nlog-log-n" class="headerlink" title="埃氏筛法预处理打表：$ O(nlog^{log^n})$"></a>埃氏筛法预处理打表：$ O(nlog^{log^n})$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, phi[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_table</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">0</span>] = <span class="number">0</span>, phi[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//1的欧拉函数值为1：唯一与1互质的数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i) phi[i] = i; <span class="comment">//先初始化为其本身</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(phi[i] == i) &#123; <span class="comment">//如果欧拉函数值仍为其本身，说明i为素数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; maxn; j += i) <span class="comment">//把i的欧拉函数值改变，同时也把能被素因子i整除的数的欧拉函数值改变</span></span><br><span class="line">                phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    phi_table(); <span class="comment">//预处理打表</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; phi[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM模板</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客练习赛37</title>
    <url>/posts/808212bd.html</url>
    <content><![CDATA[<h3 id="A-筱玛的快乐"><a href="#A-筱玛的快乐" class="headerlink" title="A.筱玛的快乐"></a>A.筱玛的快乐</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>筱玛是个快乐的男孩子。寒假终于到了，筱玛决定请他的朋友们一起来快乐。对于筱玛来说，最快乐的事情莫过于翻看万年历上的日期了。一个日期是“快乐”的，当且仅当这一年的年份是一个质数，且将月份、日期写成”MM-DD”的形式后是对称的。如：”2003-01-10”是“快乐”的。筱玛有n个小伙伴，每个小伙伴都会提出一个问题，即：从”2000-01-01”这一天开始，第k个“快乐”的日期是什么。</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行一个整数n。接下来n行，每行一个数字k，表示一次询问。</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出共n行，每行一个形如”YYYY-MM-DD”的日期表示答案。</p>
</blockquote>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">23</span><br><span class="line">48</span><br></pre></td></tr></table></figure>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2003-01-10</span><br><span class="line">2027-11-11</span><br><span class="line">2063-12-21</span><br></pre></td></tr></table></figure>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>1≤n≤$10^6$，保证答案存在且答案年份为4位数。</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>线性筛$O(1)$打表，坑：卡C++的输入输出，要用C语言的输入输出==</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxm=<span class="number">166670</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;<span class="built_in">vector</span>&lt;LL&gt; ans;<span class="keyword">bool</span> isp[maxn];LL cnt=<span class="number">0</span>,prime[maxn];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">6</span>][<span class="number">8</span>]=&#123;<span class="string">"-12-21"</span>,<span class="string">"-01-10"</span>,<span class="string">"-02-20"</span>,<span class="string">"-03-30"</span>,<span class="string">"-10-01"</span>,<span class="string">"-11-11"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler_sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp,<span class="literal">true</span>,<span class="keyword">sizeof</span>(isp));</span><br><span class="line">    <span class="built_in">memset</span>(prime,<span class="number">0</span>,<span class="keyword">sizeof</span>(prime));</span><br><span class="line">    isp[<span class="number">0</span>]=isp[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;maxn;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;maxn;++j)&#123;</span><br><span class="line">            isp[i*prime[j]]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    euler_sieve();ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>,num=<span class="number">0</span>;num&lt;maxm&amp;&amp;i&lt;cnt;++i)</span><br><span class="line">        <span class="keyword">if</span>(prime[i]&gt;<span class="number">2000L</span>L)ans.push_back(prime[i]),num++;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T))&#123;</span><br><span class="line">        <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld%s\n"</span>,ans[n/<span class="number">6</span>+(n%<span class="number">6</span>&gt;<span class="number">0</span>)<span class="number">-1</span>],str[n%<span class="number">6</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
      <tags>
        <tag>欧拉线性筛</tag>
      </tags>
  </entry>
  <entry>
    <title>费马小定理例题汇总</title>
    <url>/posts/c279d4a4.html</url>
    <content><![CDATA[<h3 id="hdu-6440-Dream"><a href="#hdu-6440-Dream" class="headerlink" title="hdu 6440 Dream"></a>hdu 6440 Dream</h3><blockquote>
<p>Freshmen frequently make an error in computing the power of a sum of real numbers, which usually origins from an incorrect equation $ (m+n)^p=m^p+n^p $, where m,n,p are real numbers. Let’s call it ‘’Beginner’s Dream’’.<br>For instance, $ (1+4)^2=5^2=25 $, but $ 1^2+4^2=17\neq25$.<br>Moreover, $ \sqrt{9+16}= \sqrt{25}=5 $, which does not equal $ 3+4=7 $.<br>Fortunately, in some cases when p is a prime, the identity $(m+n)^p=m^p+n^p $ holds true for every pair of non-negative integers m,n which are less than p, with appropriate definitions of addition and multiplication.<br>You are required to redefine the rules of addition and multiplication so as to make the beginner’s dream realized.<br>Specifically, you need to create your custom addition and multiplication, so that when making calculation with your rules the equation $ (m+n)^p=m^p+n^p $ is a valid identity for all non-negative integers m,n less than p. Power is defined as </p>
<script type="math/tex; mode=display">
a^p=\left\{\begin{matrix}
1, &  p=0 \\ 
a^{p-1}\cdot a, &   p>0
\end{matrix}\right.</script><p>Obviously there exists an extremely simple solution that makes all operation just produce zero. So an extra constraint should be satisfied that there exists an integer $q(0&lt;q&lt;p)$ to make the set ${q^k|0&lt;k&lt;p,k\in\mathbb{Z}}$ equal to ${k|0&lt;k&lt;p,k\in\mathbb{Z}}$. What’s more, the set of non-negative integers less than p ought to be closed under the operation of your definitions. </p>
</blockquote>
<a id="more"></a>
<h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><blockquote>
<p>Hint for sample input and output:<br>From the table we get $0+1=1$, and thus $(0+1)^2=1^2=1 \cdot 1=1$. On the other hand, $0^2=0\cdot0=0, 1^2=1\cdot1=1, 0^2+1^2=0+1=1$.<br>They are the same.</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line of the input contains an positive integer $T(T\leq 30) $ indicating the number of test cases.<br>For every case, there is only one line contains an integer $p(p&lt;2^{10})$, described in the problem description above. p is guranteed to be a prime. </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each test case, you should print 2p lines of p integers.<br>The j-th $(1\leq j \leq p)$ integer of i-th$(1 \leq i \leq p)$ line denotes the value of (i−1)+(j−1). The j-th $(1\leq j \leq p)$ integer of (p+i)-th $(1\leq i \leq p)$ line denotes the value of $(i−1) \cdot(j−1)$. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br><span class="line">0 1</span><br></pre></td></tr></table></figure>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>给定素数p，定义p内封闭的加法和乘法运算，使得等式$(m+n)^p = m^p + n^p\;(0 \leq m,n&lt;p) $ 恒成立。<br>由费马小定理可得对 $\forall \; x \in \mathbb{Z} $ 都有$x^p\equiv x\;(mod\;p)$，其中p是素数，则 $ m^p\equiv m\;(mod\;p),n^p\equiv n\;(mod\;p),(m+n)^p\equiv(m+n)\;(mod\;p)$,<br>所以在模p的意义下，<br>$ (m+n)^p = m^p + n^p(0 \leq m,n&lt;p),m^p \cdot n^p \equiv m\cdot n\;(mod\;p)$ 恒成立，即加法运算与乘法运算封闭。<br>备注：运算封闭的定义：若从某个非空数集中任选两个元素（同一元素可重复选出），选出的这两个元素通过某种（或几种）运算后的得数仍是该数集中的元素，那么，就说该集合对于这种（或几种）运算是封闭的。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; t)&#123;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; ++j)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, (i + j) % p, j == p - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; ++j)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i * j % p, j == p - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>费马小定理</tag>
      </tags>
  </entry>
  <entry>
    <title>（扩展）中国剩余定理模板</title>
    <url>/posts/e22674eb.html</url>
    <content><![CDATA[<h4 id="中国剩余定理：-O-nlog-n"><a href="#中国剩余定理：-O-nlog-n" class="headerlink" title="中国剩余定理：$ O(nlog^n)$"></a>中国剩余定理：$ O(nlog^n)$</h4><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">LL n, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123;<span class="comment">//快速乘法，防止两数相乘爆long long，时间复杂度为log(b)</span></span><br><span class="line">    LL res = <span class="number">0L</span>L; <span class="comment">//注意是0，不是1</span></span><br><span class="line">    <span class="keyword">while</span>(b) &#123; <span class="comment">//按b的二进制展开，然后累加二进制位对应a的幂次，同时取模</span></span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =(res + a) % mod; <span class="comment">//b中有1则累加a的值，进行加法运算</span></span><br><span class="line">        a = (a + a) % mod; <span class="comment">//a每次乘2并取模</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中国剩余定理：模数两两互质</span></span><br><span class="line"><span class="function">LL <span class="title">crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123;</span><br><span class="line">    LL lcm = <span class="number">1L</span>L, res = <span class="number">0L</span>L, M_i, x, y;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) lcm *= m[i]; <span class="comment">//先求出所有方程的模数的最小公倍数</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        M_i = lcm / m[i]; <span class="comment">//除当前方程的模数外的最小公倍数</span></span><br><span class="line">        ext_gcd(M_i, m[i], x, y);</span><br><span class="line">        x = (x % m[i] + m[i]) % m[i]; <span class="comment">//取最小非负整数解</span></span><br><span class="line">        <span class="comment">//res = (res + r[i] * M_i * x) % lcm;</span></span><br><span class="line">        res = (res + quick_mul(quick_mul(r[i], M_i, lcm), x, lcm)) % lcm; <span class="comment">//快速乘法取模，避免直接相乘导致数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扩展中国剩余定理：-O-nlog-n"><a href="#扩展中国剩余定理：-O-nlog-n" class="headerlink" title="扩展中国剩余定理：$ O(nlog^n)$"></a>扩展中国剩余定理：$ O(nlog^n)$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">LL T, n, ans, r[maxn], m[maxn];</span><br><span class="line"><span class="comment">//求解二元一次方程：ax + by = gcd(a,b)</span></span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125; <span class="comment">//不妨假设 y=0，则x=1</span></span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y; <span class="comment">//x'=y,y'=x-a/b*y</span></span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">//返回上一个状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩展中国剩余定理：模数两两不都互素</span></span><br><span class="line"><span class="function">LL <span class="title">ext_crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123; <span class="comment">//余数：r，模数：m，同余方程个数：n</span></span><br><span class="line">    LL lcm = m[<span class="number">0</span>], res = r[<span class="number">0</span>], x, y, gcd, mod;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        gcd = ext_gcd(lcm, m[i], x, y); <span class="comment">//求最大公约数</span></span><br><span class="line">        <span class="keyword">if</span>((r[i] - res) % gcd) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//无解</span></span><br><span class="line">        x *= (r[i] - res) / gcd; <span class="comment">//一个解</span></span><br><span class="line">        mod = m[i] / gcd; <span class="comment">//对应的模数</span></span><br><span class="line">        x = (x % mod + mod) % mod; <span class="comment">//最小非负整数解</span></span><br><span class="line">        res = res + lcm * x; <span class="comment">//合并后的方程的余数</span></span><br><span class="line">        lcm = lcm / gcd * m[i]; <span class="comment">//合并后的方程的模数，先除后乘，避免数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">//答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM模板</category>
      </categories>
      <tags>
        <tag>（扩展）中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>（扩展）欧几里得算法模板</title>
    <url>/posts/9a0f7abe.html</url>
    <content><![CDATA[<h4 id="欧几里得算法：-O-log-n"><a href="#欧几里得算法：-O-log-n" class="headerlink" title="欧几里得算法：$ O(log^n)$"></a>欧几里得算法：$ O(log^n)$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求两个整数的最大公约数：gcd(a, b) = gcd(b, a % b)</span></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="扩展欧几里得算法：-O-log-n"><a href="#扩展欧几里得算法：-O-log-n" class="headerlink" title="扩展欧几里得算法：$ O(log^n)$"></a>扩展欧几里得算法：$ O(log^n)$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求解二元一次方程：ax + by = gcd(a,b)</span></span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125; <span class="comment">//不妨假设 y=0，则x=1</span></span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y; <span class="comment">//x'=y,y'=x-a/b*y</span></span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">//返回上一个状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM模板</category>
      </categories>
      <tags>
        <tag>（扩展）欧几里得</tag>
      </tags>
  </entry>
  <entry>
    <title>（扩展）欧拉定理例题汇总</title>
    <url>/posts/117f1053.html</url>
    <content><![CDATA[<h3 id="hdu-4704-Sum"><a href="#hdu-4704-Sum" class="headerlink" title="hdu 4704 Sum"></a>hdu 4704 Sum</h3><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>For gievn N,let S(k) be the number of $ (x_1, x_2, \cdots ,x_k) $ which:<br>$ x_1, x_2, \cdots ,x_k \in \mathbb{Z}^+$<br>$ x_1 + x_2 +  \cdots + x_k = N $<br>Find $ (S(1)+S(2)+\cdots+S(N)) \;mod\;(10^9+7)$.</p>
</blockquote>
<a id="more"></a>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line contains an integer N. $(1\leq N\leq 10^{100000}) $</p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>An integer denotes the values.</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><blockquote>
<p>1.For N = 2, S(1) = S(2) = 1.<br>2.The input file consists of multiple test cases. </p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>$S(i)$ 表示将N划分为i个数的方案数，举个栗子：<br>当N=4时，S(1)=4,1种方案；S(2)=1+3=3+1,2种方案；<br>S(3)=1+1+2=1+2+1=2+1+1,3种方案；<br>S(4)=1+1+1+1,1种方案,一共7种方案。<br>那么原问题就转化成小球隔板问题：将N个1排成一行，有N-1个空，每个空可以选择插入或者不插入一块隔板，则一共有 $2^{N-1}$ 种方案数。因为指数非常大，且 $\gcd(2,10^9+7)=1$，所以要用扩展欧拉定理来降幂，即 $ 2^{(N-1)\%\varphi(1e9+7)} \;(mod\;1e9+7)$。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> str; LL n, phi;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line">        n = <span class="number">0L</span>L, phi = mod - <span class="number">1L</span>L;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; ++i) n = (n * <span class="number">10L</span>L + (str[i] - <span class="string">'0'</span>)) % phi; <span class="comment">//φ(p) = p - 1</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; quick_mod(<span class="number">2L</span>L, n - <span class="number">1L</span>L) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 2^(n - 1) % p</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>（扩展）欧拉定理例题</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣刷题第1天</title>
    <url>/posts/4cd4f6fe.html</url>
    <content><![CDATA[<h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><div class="note default no-icon">
            <p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
          </div><a id="more"></a>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[2,7,11,15]</span><br><span class="line">Output:</span><br><span class="line">[0, 1]</span><br></pre></td></tr></table></figure>
<h4 id="Idea："><a href="#Idea：" class="headerlink" title="Idea："></a>Idea：</h4><div class="note default no-icon">
            <p>采用边哈希边查找的方式来判断是否有相异的2个元素即可！<br>时间复杂度为$ O(n) $。</p>
          </div>
<h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><details>
<summary>C++代码</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;  <span class="comment">// 采用无序哈希表，O(1)查询</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, siz = nums.size(); i &lt; siz; ++i) &#123;</span><br><span class="line">        	tmp = target - nums[i];</span><br><span class="line">        	<span class="keyword">if</span>(hash.find(tmp) != hash.end()) &#123;</span><br><span class="line">        		res = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;hash[tmp], i&#125;);</span><br><span class="line">        		<span class="keyword">break</span>;</span><br><span class="line">        	&#125; </span><br><span class="line">        	hash[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>Java代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; mp = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">//一般查询时间复杂度为O(1)</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> dig = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, siz = nums.length; i &lt; siz; ++i) &#123;</span><br><span class="line">            dig = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.containsKey(dig)) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = mp.get(dig);</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mp.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>


<details>
<summary>Python3代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hash_map = &#123;&#125;  <span class="comment"># 采用字典，查询速度为O(1)，缺点是占用内存大</span></span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(nums):  <span class="comment"># 枚举字典</span></span><br><span class="line">            other_idx = hash_map.get(target - val)</span><br><span class="line">            <span class="keyword">if</span> other_idx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> [other_idx, idx]</span><br><span class="line">            hash_map[val] = idx</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>
</details>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">提交结果</th>
<th style="text-align:center">执行用时</th>
<th style="text-align:center">内存消耗</th>
<th style="text-align:center">语言</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253467974/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">8 ms</td>
<td style="text-align:center">10 MB</td>
<td style="text-align:center">Cpp</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253337756/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">2 ms</td>
<td style="text-align:center">37.2 MB</td>
<td style="text-align:center">Java</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253474056/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">56 ms</td>
<td style="text-align:center">15.1 MB</td>
<td style="text-align:center">Python3</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h3><h4 id="Description：-1"><a href="#Description：-1" class="headerlink" title="Description："></a>Description：</h4><div class="note default no-icon">
            <p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
          </div>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output:</span><br><span class="line">7 -&gt; 0 -&gt; 8</span><br></pre></td></tr></table></figure>
<h4 id="Idea：-1"><a href="#Idea：-1" class="headerlink" title="Idea："></a>Idea：</h4><div class="note default no-icon">
            <p>小学数学，只需按位相加，最后的进位单独处理！固定一个头指针指向答案整条链的首地址，通过另一个指针cur创建new下一个next节点，注意：要先new创建当前指针的下一个next节点再移动当前cur到下一个节点的地址处，否则将会断开整条链！</p>
          </div>
<h4 id="Solution：-1"><a href="#Solution：-1" class="headerlink" title="Solution："></a>Solution：</h4><details>
<summary>C++代码</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">		ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">		ListNode* cur = head;</span><br><span class="line">		<span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(l1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				carry += l1 -&gt; val;</span><br><span class="line">				l1 = l1 -&gt; next;</span><br><span class="line">			&#125; 	</span><br><span class="line">			<span class="keyword">if</span>(l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				carry += l2 -&gt; val;</span><br><span class="line">				l2 = l2 -&gt; next;</span><br><span class="line">			&#125;</span><br><span class="line">			cur -&gt; next = <span class="keyword">new</span> ListNode(carry % <span class="number">10</span>);</span><br><span class="line">			cur = cur -&gt; next;</span><br><span class="line">			carry /= <span class="number">10</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			cur -&gt; next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">			cur = cur -&gt; next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> head -&gt; next;  	   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>Java代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode now = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sum = l1.val + l2.val + carry;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                now.val = sum % <span class="number">10</span>;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sum = l1.val + carry;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                now.val = sum % <span class="number">10</span>;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = l2.val + carry;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                now.val = sum % <span class="number">10</span>;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur.next = now;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ListNode now = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">            cur.next = now;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>Python3代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = head</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 逻辑运算符的优先级：not &gt; and &gt; or</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                carry += l1.val</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                carry += l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            cur.next = ListNode(carry % <span class="number">10</span>)</span><br><span class="line">            cur = cur.next</span><br><span class="line">            carry //= <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> carry &gt; <span class="number">0</span>:</span><br><span class="line">            cur.next = ListNode(carry)</span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<h4 id="Submission-Detail："><a href="#Submission-Detail：" class="headerlink" title="Submission Detail："></a>Submission Detail：</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">提交结果</th>
<th style="text-align:center">执行用时</th>
<th style="text-align:center">内存消耗</th>
<th style="text-align:center">语言</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253327992/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">16 ms</td>
<td style="text-align:center">44.7 MB</td>
<td style="text-align:center">Cpp</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253328219/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">1 ms</td>
<td style="text-align:center">44.7 MB</td>
<td style="text-align:center">Java</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253327340/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">76 ms</td>
<td style="text-align:center">14 MB</td>
<td style="text-align:center">Python3</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h3><h4 id="Description：-2"><a href="#Description：-2" class="headerlink" title="Description："></a>Description：</h4><div class="note default no-icon">
            <p>Given a string, find the length of the longest substring without repeating characters.</p>
          </div>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;abcabcbb&quot;</span><br><span class="line">&quot;bbbbb&quot;</span><br><span class="line">&quot;pwwkew&quot;</span><br><span class="line">Output:</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="Idea：-2"><a href="#Idea：-2" class="headerlink" title="Idea："></a>Idea：</h4><div class="note default no-icon">
            <p>典型的双指针问题！以右指针为参照点，若当前右指针指向字符出现的次数大于1，则不断地移动左指针（不超过右指针），然后更新一下区间元素不重复出现的最多个数： $ max(res, ed -st + 1) $ 即可 ！时间复杂度为 $ O(n) $。<br>python中使用字典加优化的解法，即对于当前右指针指向的字符，若有出现相同键的旧下标值，则跳到旧下标的下一个位置！</p>
          </div>
<h4 id="Solution：-2"><a href="#Solution：-2" class="headerlink" title="Solution："></a>Solution：</h4><details>
<summary>C++代码</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, st = <span class="number">0</span>, ed = <span class="number">0</span>, siz = s.size();</span><br><span class="line">        <span class="keyword">int</span>* num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>](); <span class="comment">//初始化一个全为0的int数组</span></span><br><span class="line">        <span class="keyword">while</span>(ed &lt; siz) &#123;</span><br><span class="line">            ++num[s[ed]];</span><br><span class="line">            <span class="keyword">while</span>(st &lt; ed &amp;&amp; num[s[ed]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                --num[s[st]];</span><br><span class="line">                ++st;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res, ed - st + <span class="number">1</span>);</span><br><span class="line">            ++ed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>Java代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, st = <span class="number">0</span>, ed = <span class="number">0</span>, siz = s.length();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">while</span>(ed &lt; siz) &#123;</span><br><span class="line">            ++nums[s.charAt(ed)];</span><br><span class="line">            <span class="keyword">while</span>(st &lt; ed &amp;&amp; nums[s.charAt(ed)] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                --nums[s.charAt(st)];</span><br><span class="line">                ++st;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, ed - st + <span class="number">1</span>);</span><br><span class="line">            ++ed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>Python3代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        res, st, hash_map = <span class="number">0</span>, <span class="number">0</span>, &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(s):  <span class="comment"># 枚举遍历字符串</span></span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> hash_map:  <span class="comment"># 自动判断字典中是否存在一个key，存在就跳，否则不移动</span></span><br><span class="line">                tmp = hash_map[val] + <span class="number">1</span>  <span class="comment"># O(1) 获取值</span></span><br><span class="line">                <span class="keyword">if</span> tmp &gt; st:  <span class="comment"># 尽量用if-else语句，测试大量数据时可降低时间复杂度</span></span><br><span class="line">                    st = tmp  <span class="comment"># 取左指针的最大值</span></span><br><span class="line">            num = idx - st + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num &gt; res:</span><br><span class="line">                res = num</span><br><span class="line">            hash_map[val] = idx</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
</details>

<h4 id="Submission-Detail：-1"><a href="#Submission-Detail：-1" class="headerlink" title="Submission Detail："></a>Submission Detail：</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">提交结果</th>
<th style="text-align:center">执行用时</th>
<th style="text-align:center">内存消耗</th>
<th style="text-align:center">语言</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253545738/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">8 ms</td>
<td style="text-align:center">9.9 MB</td>
<td style="text-align:center">Cpp</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253535921/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">3 ms</td>
<td style="text-align:center">35.9 MB</td>
<td style="text-align:center">Java</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://leetcode.com/submissions/detail/253554756/" target="_blank" rel="noopener">Accepted</a></td>
<td style="text-align:center">56 ms</td>
<td style="text-align:center">14.1 MB</td>
<td style="text-align:center">Python3</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>LeetCode刷题集</category>
      </categories>
      <tags>
        <tag>单链表</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉函数例题汇总</title>
    <url>/posts/41e549f1.html</url>
    <content><![CDATA[<h3 id="hdu-1787-GCD-Again"><a href="#hdu-1787-GCD-Again" class="headerlink" title="hdu 1787 GCD Again"></a>hdu 1787 GCD Again</h3><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>Do you have spent some time to think and try to solve those unsolved problem after one ACM contest?<br>No? Oh, you must do this when you want to become a “Big Cattle”.<br>Now you will find that this problem is so familiar:<br>The greatest common divisor $ GCD (a, b) $ of two positive integers a and b, sometimes written $ (a, b) $ , is the largest divisor common to a and b. For example, $ (1, 2) = 1 $, $ (12, 18) = 6 $. $ (a, b) $ can be easily found by the Euclidean algorithm. Now I am considering a little more difficult problem:<br>Given an integer N, please count the number of the integers $ M (0&lt; M &lt; N) $ which satisfies $ (N, M) &gt; 1 $.<br>This is a simple version of problem “GCD” which you have done in a contest recently,so I name this problem “GCD Again”.If you cannot solve it still,please take a good think about your method of study.Good Luck!</p>
</blockquote>
<a id="more"></a>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>Input contains multiple test cases. Each test case contains an integers $ N (1&lt;N&lt;100000000) $. A test case containing 0 terminates the input and this test case is not to be processed.</p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each integers N you should output the number of integers M in one line, and with one line of output for each line in input. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">求小于n且与n不互质的正整数的个数。</span><br></pre></td></tr></table></figure>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">LL n;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res = x;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n - <span class="number">1</span> - get_Euler(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-2824-The-Euler-function"><a href="#hdu-2824-The-Euler-function" class="headerlink" title="hdu 2824 The Euler function"></a>hdu 2824 The Euler function</h3><h4 id="Problem-Description-1"><a href="#Problem-Description-1" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>The Euler function phi is an important kind of function in number theory, $ (n) $ represents the amount of the numbers which are smaller than n and coprime to n, and this function has a lot of beautiful characteristics. Here comes a very easy question: suppose you are given a, b, try to calculate $ (a)+ (a+1)+….+ (b) $.</p>
</blockquote>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>There are several test cases. Each line has two integers $ a, b (2&lt;a&lt;b&lt;3000000) $ .</p>
</blockquote>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>Output the result of $ (a)+ (a+1)+….+ (b) $.</p>
</blockquote>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 100</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3042</span><br></pre></td></tr></table></figure>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>打表求欧拉函数值前缀和，注意只需开一个数组就够了，避免超内存。</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line">LL a, b, phi[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_table</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">0</span>] = <span class="number">0L</span>L, phi[<span class="number">1</span>] = <span class="number">1L</span>L; <span class="comment">//1的欧拉函数值为1，唯一与1互质的数</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>; i &lt; maxn; ++i) phi[i] = i; <span class="comment">//先初始化为其本身</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>; i &lt; maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(phi[i] == i) &#123; <span class="comment">//如果欧拉函数值仍为其本身，说明i为素数</span></span><br><span class="line">            <span class="keyword">for</span>(LL j = i; j &lt; maxn; j += i) <span class="comment">//把i的欧拉函数值改变，同时也把能被素因子i整除的数的欧拉函数值改变</span></span><br><span class="line">                phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i &lt; maxn; ++i) phi[i] += phi[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    phi_table(); <span class="comment">//预处理打表</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; phi[b] - phi[a - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-3501-Calculation-2"><a href="#hdu-3501-Calculation-2" class="headerlink" title="hdu 3501 Calculation 2"></a>hdu 3501 Calculation 2</h3><h4 id="Problem-Description-2"><a href="#Problem-Description-2" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>Given a positive integer N, your task is to calculate the sum of the positive integers less than N which are not coprime to N. A is said to be coprime to B if A, B share no common positive divisors except 1.</p>
</blockquote>
<h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>For each test case, there is a line containing a positive integer $ N(1 ≤ N ≤ 1000000000) $. A line containing a single 0 follows the last test case.</p>
</blockquote>
<h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each test case, you should print the sum module 1000000007 in a line.</p>
</blockquote>
<h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>求小于n且与n不互质的所有正整数之和，公式：$ [\frac{n(n - 1)}{2} - \frac{n*\varphi(n)}{2}] mod \; 1000000007 $.</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1000000007</span>;</span><br><span class="line">LL n;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res = x; <span class="comment">//初始值</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>); <span class="comment">//先除后乘，避免数据过大</span></span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>); <span class="comment">//若x大于1，则剩下的x必为素因子</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (n * (n - <span class="number">1</span>) / <span class="number">2</span> - n * get_Euler(n) / <span class="number">2</span>) % mod &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-2588-GCD"><a href="#hdu-2588-GCD" class="headerlink" title="hdu 2588 GCD"></a>hdu 2588 GCD</h3><h4 id="Problem-Description-3"><a href="#Problem-Description-3" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>The greatest common divisor $ GCD(a, b) $ of two positive integers a and b,sometimes written $ (a,b) $, is the largest divisor common to a and b,For example,<br>$ (1, 2) = 1, (12,18)=6 .(a,b) $ can be easily found by the Euclidean algorithm. Now Carp is considering a little more difficult problem:<br>Given integers N and M, how many integer X satisfies $ 1 \leq  X \leq N $ and $ (X, N) \geq M $.</p>
</blockquote>
<h4 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line of input is an integer $ T(T \leq 100) $ representing the number of test cases. The following T lines each contains two numbers N and M<br>$ (2 \leq N \leq 1000000000, 1 \leq M \leq N) $, representing a test case.</p>
</blockquote>
<h4 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each test case,output the answer on a single line.</p>
</blockquote>
<h4 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 1</span><br><span class="line">10 2</span><br><span class="line">10000 72</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br><span class="line">260</span><br></pre></td></tr></table></figure>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>$ \because GCD(X, N) \geq M, X \in [1,N], \therefore GCD(X, N) $ 一定是N的约数。假设我们已经知道N的一个约数为 $ P(P \geq M) $，则问题转换成在 $ [1,N] $ 内有多少个数X，满足$ GCD(X, N) = P $ (假设P是一个已知值)，接下来就是枚举每个 $ P(P \geq M) $，累加每个P对应X的个数。但是对于每个不小于M的N的约数P去计算满足$ GCD(X, N) \geq M $ 的X的个数的情况可能比较复杂，需要考虑的情况比较多，简单的想法是：在 $ [1,N] $内用 $ O(NlogN) $ 的时间复杂度判断一下 $ GCD(X, N) $ 是否不小于M，但是题目中N最大为$ 10^{10} $，这肯定是超时的了。<br>因此进一步推导：$ \because GCD(X, N) = P, \therefore GCD(\frac{X}{P}, \frac{N}{P}) = 1 $（很明显 $ \frac{X}{P} $ 与 $  \frac{N}{P} $ 互质），又 $\because X \leq N $，$\therefore  \frac{X}{P} \leq \frac{N}{P} $，而问题是求X的个数，结合欧拉函数的定义可知即求小于 $ \frac{N}{P} $ 且与其互质的正整数 $ \frac{X}{P} $ 的个数，即求 $ \varphi(\frac{N}{P}) $。对于N的每个约数P，我们只需从1枚举到 $ \sqrt{N} $ 即可，因为 $ \frac{N}{P} $ 可以得到N的另一个约数（相当于枚举了N的所有约数），这样时间复杂度就大大降低了。</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> T; LL n, m, ans;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res = x; <span class="comment">//初始值</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>); <span class="comment">//先除后乘，避免数据过大</span></span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>); <span class="comment">//若x大于1，则剩下的x必为素因子</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T) &#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m; ans = <span class="number">0L</span>L;</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">1L</span>L; i * i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(n % i) <span class="keyword">continue</span>; <span class="comment">//跳过不是n的约数</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt;= m &amp;&amp; i * i != n) ans += get_Euler(n / i); <span class="comment">//约数i不小于m，累加phi[n/i]，如果i*i==n，只算一次即可</span></span><br><span class="line">                <span class="keyword">if</span>(n / i &gt;= m) ans += get_Euler(i); <span class="comment">//另一个约数n/i不小于m，累加phi[n/(n/i)]=phi[i]</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="poj-2480-Longge’s-problem"><a href="#poj-2480-Longge’s-problem" class="headerlink" title="poj 2480 Longge’s problem"></a>poj 2480 Longge’s problem</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><blockquote>
<p>Longge is good at mathematics and he likes to think about hard mathematical problems which will be solved by some graceful algorithms. Now a problem comes: Given an integer $ N(1 &lt; N &lt; 2^{31}) $,you are to calculate <script type="math/tex">\sum gcd(i, N), 1 \leq  i \leq N</script>. “Oh, I know, I know!” Longge shouts! But do you know? Please solve it. </p>
</blockquote>
<h4 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>Input contain several test case. A number N per line. </p>
</blockquote>
<h4 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each N, output <script type="math/tex">\sum gcd(i, N), 1 \leq  i \leq N</script>, a line</p>
</blockquote>
<h4 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">15</span><br></pre></td></tr></table></figure>
<h4 id="思路1："><a href="#思路1：" class="headerlink" title="思路1："></a>思路1：</h4><blockquote>
<p>给出一个数n，求 $ 1-n $ 这n个数与n的最大公约数之和。举个栗子：当$ n = 4 $ 时，1，2，3，4与4的最大公约数分别为1，2，1，4，累加和为8。正解：$ 1-n $ 中每个数与n的最大公约数肯定是n的一个因子，所以我们只需要枚举n的每一个因子 $ x \in [1, \sqrt{n}] $ ，然后看有多少个满足 $ gcd(k, n) == x $，即求满足 $ gcd(\frac{k}{x}, \frac{n}{x}) == 1 $ 中k的个数（用欧拉函数求解），则公式为：<script type="math/tex">\sum_{x|n}^n x *  [gcd(\frac{k}{x}, \frac{n}{x}) == 1]</script>。</p>
</blockquote>
<h4 id="AC代码1："><a href="#AC代码1：" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">LL n, ans;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res = x;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        ans = <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">for</span> (LL i = <span class="number">1L</span>L; i * i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ans += i * get_Euler(n / i);</span><br><span class="line">                <span class="keyword">if</span>(i * i != n) ans += n / i * get_Euler(i);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="思路2："><a href="#思路2：" class="headerlink" title="思路2："></a>思路2：</h4><blockquote>
<p>思路和上面相同，<script type="math/tex">\because n = p_1^{k_1}p_2^{k_2} \cdots p_m^{k_m}</script>，<script type="math/tex">\therefore</script> 将问题求解转换一下 <script type="math/tex">gcd(i, n) == p_i^j</script>，其中 <script type="math/tex">j \leq k_i</script> 即求 <script type="math/tex">\sum_{p_i^j|n}^n p_i^j * [gcd(\frac{i}{p_i^j}, \frac{n}{p_i^j}) == 1]</script>，<br>化简公式得 <script type="math/tex">\varphi(p_i^{k_i}) = (k_i + 1) * p^{k_i} - k_i * p^{k_i - 1}</script>，<br>再根据积性函数的性质得 <script type="math/tex">\varphi(n) = \prod_{i = 1}^m \varphi(p_i^{k_i})</script>。时间复杂度是 <script type="math/tex">O(\sqrt{n})</script>。</p>
</blockquote>
<h4 id="AC代码2："><a href="#AC代码2：" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    LL p_i, k, ans = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            p_i = <span class="number">1L</span>L, k = <span class="number">0</span>; </span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;k++, p_i *= i, x /= i;&#125;</span><br><span class="line">            ans *= (k + <span class="number">1</span>) * p_i - k * p_i / i; <span class="comment">//(k+1)*p^k - k*p^(k-1)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) ans *= <span class="number">2</span> * x - <span class="number">1L</span>L; </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>数论笔记整理2</title>
    <url>/posts/545d3697.html</url>
    <content><![CDATA[<h4 id="威尔逊定理："><a href="#威尔逊定理：" class="headerlink" title="威尔逊定理："></a>威尔逊定理：</h4><blockquote>
<p>判定一个自然数是否为素数的充要条件：$ (p - 1)! \equiv -1 \;( mod \; p) $，当且仅当p为素数。</p>
</blockquote>
<a id="more"></a>
<h5 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h5><blockquote>
<p>一、充分性（逆否命题）：若p不是素数，即p是合数，则 $ (p - 1)! \not\equiv -1 \;( mod \; p) $。<br>特殊情况：当 $ p = 4 $ 时，$ [(p - 1) !\equiv 6 \equiv 2 \;(mod \; p)] \not\equiv -1 \;( mod \; p) $，显然成立；<br>当 $ p &gt; 4 $ 时，分2种情况讨论：<br>①若p不是完全平方数，则 $ \exists \; a, b \in [1, p) \land (a \neq b) $，使得 <script type="math/tex">p = a * b</script>，<br>则 <script type="math/tex">(p - 1) ! \equiv n * a * b \equiv 0 \; (mod \; p)</script>，显然成立。<br>②若p是完全平方数，即 $ \exists \; k &gt; 2 \land (k, 2k &lt; p) $，使得 $ p = k^2 $，<br>则 <script type="math/tex">(p - 1)! \equiv m * (k * 2k) \equiv {m}' * k^2 \equiv 0 \;(mod \; p)</script>，显然也成立。<br>二、必要性：若p为素数，则 $ (p - 1)! \equiv -1 \;(mod \; p) $。<br>当 $ p = 2 \vee p = 3 $ 时，显然恒等式成立；<br>当 $ p \ge 5 $ 时，令集合 $ A = {1,2,3,\cdots,p-1} $，显然集合A中每个元素都与p互质，即集合A是模p的一个缩系；令集合 $ B = {2,3,\cdots,p-2} $，对 $ \forall \; a \in B $，令集合 $ C = {a,2a,\cdots,(p-1)a} $，由缩系的性质可得集合C也是模p的一个缩系，即集合C中每个元素：模p不同余且不能被p整除。<br>下面证明集合C是模p的一个缩系：<br>①因为 $ (p\nmid a \in B) \land (p \nmid b \in A)$，所以<code>素数p不整除集合C中的每个元素</code>；<br>②若 $ \exists \; t_1, t_2 \in A \land (t_1 \neq t_2) $，使得 <script type="math/tex">t_1 * a \equiv t_2 * a \; (mod \; p)</script>，则由同余的性质可得 <script type="math/tex">|t_1 - t_2| * a \equiv 0\;(mod \; p)</script>，又因 <script type="math/tex">|t_1 - t_2| * a \in C</script>，显然这与集合C中每一个元素不能被p整除相矛盾，所以 <script type="math/tex">t_1 * a \not\equiv t_2 * a \; (mod \; p)</script>，即<code>集合C中每个元素模p不同余</code>！<br>因此，$ C \; mod \; p = A $，则对 $ \forall \; a \in B $，必 $ \exists \; b \in A $，使得 $ ab \equiv 1 \;(mod \; p) $。<br>下面证明 $ b \notin {1,p-1,a} $：<br>若 $ b = 1 $，则 $ a \equiv a \not\equiv 1 \; (mod \; p) $，显然不成立；<br>若 $ b = p - 1 $，则 $ a(p - 1) \equiv (p - a) \not\equiv 1 (mod \; p) $，显然不成立；<br>若 $ b = a $，则 $ a^2 \equiv 1 \;(mod \; q)$，解得 $ a = 1 \vee  a = p - 1 $，因为 $ a \in B $，所以不成立。<br>综上所述，$ \forall \; a, b \in B $，当a不同时，b也随之不同，即对于集合B中的每一个元素a都能够找到一个与之配对的b，使得 $ ab \equiv 1 \;(mod \; p) $，所以 <script type="math/tex">(p - 1) ! \equiv 1 * 2b_1 * \cdots * (p - 1) (mod \; p) \equiv 1 * (p -1) (mod \; p) \equiv -1 (mod \; p)</script>.证毕！ </p>
</blockquote>
<h5 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h5><blockquote>
<p>①剩余类（也称同余类）：设模数为m，则根据余数可将所有的整数分为m类，把所有与整数a模m同余的整数构成的集合叫做模m的一个剩余类，记作 $ [a] $，并把a叫作剩余类 $ [a] $ 的一个代表元。<br>②简化剩余系（也称既约剩余系、缩系）：如果一个模m的剩余类里面的数与m互素（显然，只需有一个与m互素，其余的均与m互素）就称之为一个与模m互素的剩余类，在与模m互素的全部剩余类中，各取一数所组成的集合叫做模m的一个简化剩余系。<br>③缩系的性质：1)、对于任意一个与m互素的正整数k，即 $ \gcd(k, m) = 1 $，若 <script type="math/tex">\{ a_1,a_2,\cdots,a_{\varphi(m)} \}</script> 为模m的一个缩系，则 <script type="math/tex">\{k * a_1,k * a_2,\cdots,k * a_{\varphi(m)} \}</script> 也为模m的一个缩系。2)、<script type="math/tex">(k * a_1) \cdots (k * a_{\varphi(m)}) \equiv a_1 * a_2 \cdots a_{\varphi(m)} \;(mod \; m)</script>。</p>
</blockquote>
<h4 id="费马小定理："><a href="#费马小定理：" class="headerlink" title="费马小定理："></a>费马小定理：</h4><blockquote>
<p>定义：当 $ p $ 是素数时，对 $ \forall \; a \in \mathbb{Z}$，都有 $ a^p \equiv a \;(mod \; p) $。<br>特别地，当 $ \gcd(a,p)=1 $ 时，有 $ a^{p-1} \equiv 1 \; (mod \; p) $。</p>
</blockquote>
<h5 id="证明：-1"><a href="#证明：-1" class="headerlink" title="证明："></a>证明：</h5><blockquote>
<p>用完系的性质证明特殊情况：已知p是素数，令集合A为模p的最小非负完系的一个子集（去掉余数0），即 $ A = {1,2,3,\cdots,p-1} $，显然<code>集合A中每个元素都与p互质</code>。对 $ \forall \; a \in \mathbb{Z} \land \gcd(a,p)=1 $，令集合 $ C = {a,2a,\cdots,(p-1)a} $，由完系的性质2可得集合C也是模p的一个完系的一个子集（去掉余数0），<br>则 <script type="math/tex">1 * 2 * 3 * \cdots * (p-1) \equiv a * 2a * 3a * \cdots * (p-1)a \;(mod \; p)</script>，<br>$ \Rightarrow  (p-1)! \equiv (p-1)! * a^{p-1} \; (mod \; p) $，因为 $ \gcd\left((p-1)!,p\right)=1 $，<br>由同余式的性质约去 $(p-1)! $ 得 $ a^{p-1} \equiv 1 \;(mod \; p) $，证毕！</p>
</blockquote>
<h5 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h5><blockquote>
<p>④完全剩余系（简称完系）：从模m的每个剩余类中各取一个数，得到一个由m个数组成的集合，叫做模m的一个完全剩余系。<br>完系的性质：1）、对于m个整数，其构成模m的完系等价于其关于<code>模m两两不同余</code>；2）、对于任意一个与m互素的整数k，即 $ k \in \mathbb{Z} \land \gcd(k, m) = 1 $，若 $ {a_1,a_2,\cdots,a_m} $ 为模m的一个完系，则 <script type="math/tex">\{k * a_1,k * a_2,\cdots,k * a_m \}</script> 也为模m的一个完系。3）、$ {0,1,\cdots,m-1} $ 称为模m的最小非负完全剩余系。</p>
</blockquote>
<h4 id="欧拉定理："><a href="#欧拉定理：" class="headerlink" title="欧拉定理："></a>欧拉定理：</h4><blockquote>
<p>定义：若 $a,m \in \mathbb{N}^+ \land \gcd(a,m) =1 $，则 $ a^{\varphi(m)} \equiv 1\;(mod\;m)$。</p>
</blockquote>
<h5 id="证明：-2"><a href="#证明：-2" class="headerlink" title="证明："></a>证明：</h5><blockquote>
<p>证明用到缩系的性质：令 <script type="math/tex">1 \sim m</script> 与m互素的数 <script type="math/tex">x_i</script> 构成集合A，即 <script type="math/tex">A = \{x_1,x_2,\cdots,x_{\varphi(m)}\}</script>，显然集合A为模m的一个缩系。<br>由缩系的性质可得对于任意一个与m互素的正整数a，即 $ a \in \mathbb{N}^+ \land \gcd(a, m) = 1 $，令 <script type="math/tex">C = \{a * x_1,a * x_2,\cdots,a * x_{\varphi(m)} \}</script>，显然集合C也为模m的一个缩系，<br>下面证明集合C是模m的一个缩系：<br>①集合C中任意两个数模m都不同余。用反证法证明：若 <script type="math/tex">\exists \; a * x_i \equiv a * x_j \;(mod\;m)</script>，其中 <script type="math/tex">x_i \neq x_j</script>，则根据同余的性质可得 <script type="math/tex">m | (ax_i-ax_j)</script>，<br>又因为 <script type="math/tex">\gcd(a,m)=1 \land (x_i-x_j)<m</script>，所以 <script type="math/tex">m \nmid(ax_i-ax_j)</script>，<br>即集合C中任意两个数模m都不同余！<br>②集合C中每个元素模m的余数都与m互素。<br>证明：因为 <script type="math/tex">x_i \equiv 1 \;(mod\;m) \land \gcd(a,m)=1</script>，所以 <script type="math/tex">ax_i \equiv 1 \;(mod\;m)</script>。根据欧几里得算法：因为 <script type="math/tex">\gcd(ax_i, m) =1</script>，所以 <script type="math/tex">\gcd(ax_i,m)= \gcd(m,ax_i \%m) =1</script>，即集合C中任意一个数模m得余数都与m互素。<br>综上，集合C是模m的一个缩系。<br>则 <script type="math/tex">x_1 \times  x_2 \times  \cdots \times  x_{\varphi(m)} \equiv a \times  x_1 \times  a \times  x_2 \times  \cdots \times  a \times  x_{\varphi(m)}  \; (mod\;m)</script>  <script type="math/tex">\Rightarrow \prod_{i=1}^{\varphi(m)} x_i \equiv a^{\varphi(m)} \times  \prod_{i=1}^{\varphi(m)} x_i \;(mod \; m)</script>，<br>因为 <script type="math/tex">\gcd\left(\prod_{i=1}^{\varphi(m)} x_i, m \right)=1</script>，<br>由同余的性质约去 $ \prod_{i=1}^{\varphi(m)} x_i $ 得 $ a^{\varphi(m)} \equiv 1\;(mod\;m)$，证毕！</p>
</blockquote>
<h5 id="推论："><a href="#推论：" class="headerlink" title="推论："></a>推论：</h5><blockquote>
<p>若 $ \;a,b,m \in \mathbb{N}^+ \land \gcd(a,m)=1 $，则 $ a^b \equiv a^{b \% \varphi(m)} \;(mod\;m) $<br>证明：设 $ b=k \times \varphi(m)+r$，其中 $ k \in \mathbb{Z} \land 0 \leq r &lt; \varphi(m) $。<br>因为 $ a^{\varphi(m)} \equiv 1\;(mod\;m)$，所以 $ (a^{\varphi(m)})^k \equiv 1 \;(mod\;m) $，<br>则 $ a^b \equiv a^{k \times \varphi(m)+r} \equiv (a^{\varphi(m)})^k \times a^r \equiv a^r \equiv a^{b\%\varphi(m)} \;(mod\;m)$，证毕！</p>
</blockquote>
<h4 id="扩展欧拉定理："><a href="#扩展欧拉定理：" class="headerlink" title="扩展欧拉定理："></a>扩展欧拉定理：</h4><blockquote>
<p>若 $a,b,m \in \mathbb{N}^+ $ (扩展到a和m不互质的情况)，则有：</p>
<script type="math/tex; mode=display">
a^b\equiv
\begin{cases}
&a^b & b\leq\varphi(m)\\
&a^{b\%\varphi(m)+\varphi(m)} & b>\varphi(m)
\end{cases}\pmod m</script></blockquote>
<h5 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h5><blockquote>
<p>注意：当 $ b \leq \varphi(m) $ 时，不能套用第二个公式，举个栗子：<br>$ 2^2 \;(mod\;8) \neq 2^{2\%4+4} \;(mod\;8) $。</p>
</blockquote>
<h4 id="中国剩余定理："><a href="#中国剩余定理：" class="headerlink" title="中国剩余定理："></a>中国剩余定理：</h4><blockquote>
<p>经典栗子：韩信点兵。<br>求解用到的引理：①两个数不能整除，若被除数扩大（或缩小）a倍，除数不变，则商和余数也扩大（或缩小）a倍。<br>②两个数相加，若存在一个数不能被整数a整除，则它们的和也不能被整数a整除。<br>一元线性同余方程组：</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
x \equiv r_1 & (mod\;m_1) \\ 
x \equiv r_2 & (mod\;m_2)  \\ 
 \vdots & \vdots  \\ 
 x  \equiv r_n & (mod\;m_n)
\end{matrix}\right.</script><p>其中 <script type="math/tex">m_1,m_2,\cdots,m_n</script>均两两互质，求x的最小非负整数解。<br>解法：令 <script type="math/tex">M = \prod_{i=1}^n m_i,M_i = \frac{M}{m_i}</script>，即M是所有模数的最小公倍数，<script type="math/tex">M_i</script>是除了当前方程的模数外其他所有方程的模数的最小公倍数，设 <script type="math/tex">t_i</script> 为同余方程 <script type="math/tex">M_i \cdot t_i \equiv 1\;(mod\;m_i)</script> 的最小非负整数解，则该方程组的一个解为<script type="math/tex">x_0 = \sum_{i=1}^n   M_i\cdot t_i \cdot r_i</script>，通解为 <script type="math/tex">x_0 + k * M</script>，其中 <script type="math/tex">k \in \mathbb{Z}</script>。特别地，最小非负整数解为 <script type="math/tex">(x_0\%M+M)\%M</script>。</p>
</blockquote>
<h4 id="扩展中国剩余定理："><a href="#扩展中国剩余定理：" class="headerlink" title="扩展中国剩余定理："></a>扩展中国剩余定理：</h4><blockquote>
<p>同样是一元线性同余方程组，若n个同余方程的模数不都两两互质，那该如何求解呢？<br>首先我们从简单入手，考虑一下同余方程组只有两个式子的情况，目标：合二为一。</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
x\equiv r_1 & (mod\;m_1) \\ 
x\equiv r_2 & (mod\;m_2)  
\end{matrix}\right.</script><p>将两个式子变形得</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
x= r_1 + m_1 \cdot k_1 \\ 
x= r_2 + m_2 \cdot k_2 
\end{matrix}\right.</script><p>联立并移项得 $ m_1 \cdot k_1=r_2-r_1+m_2\cdot k_2 $，由贝祖定理得方程有解的充要条件是 $ \gcd(m_1,m_2)\;|\;(r_2-r_1)$。若有解，则方程两边同除以 $\gcd(m_1,m_2)$ 得</p>
<script type="math/tex; mode=display">
\frac{m_1}{\gcd(m_1,m_2)}k_1 = \frac{r_2-r_1}{\gcd(m_1,m_2)} + \frac{m_2}{\gcd(m_1,m_2)}k_2</script><p>转换为同余关系得</p>
<script type="math/tex; mode=display">
\frac{m_1}{\gcd(m_1,m_2)}k_1 = \frac{r_2-r_1}{\gcd(m_1,m_2)} \left(mod\;\frac{m_2}{\gcd(m_1,m_2)}\right)</script><p>到这里，$k_2$ 被消去了，接着同余式两边同除以 $ \frac{m_1}{\gcd(m_1,m_2)}$ 得</p>
<script type="math/tex; mode=display">
k_1 \equiv inv(\frac{m_1}{\gcd(m_1,m_2)},\frac{m_2}{\gcd(m_1,m_2)}) \times \frac{r_2-r_1}{\gcd(m_1,m_2)} \left(mod\;\frac{m_2}{\gcd(m_1,m_2)}\right)</script><p>其中 $inv(a,b) $ 表示a在模b意义下的乘法逆元，将同余式表示为方程得</p>
<script type="math/tex; mode=display">
k_1 = inv(\frac{m_1}{\gcd(m_1,m_2)},\frac{m_2}{\gcd(m_1,m_2)}) \times \frac{r_2-r_1}{\gcd(m_1,m_2)} + \frac{m_2}{\gcd(m_1,m_2)} \times y</script><p>把 $k_1$ 代入 $ x= r_1 + m_1 \cdot k_1$ 得</p>
<script type="math/tex; mode=display">
x = r_1 + inv(\frac{m_1}{\gcd(m_1,m_2)},\frac{m_2}{\gcd(m_1,m_2)}) \times \frac{r_2-r_1}{\gcd(m_1,m_2)} \times m_1 + \frac{m_1 \cdot m_2}{\gcd(m_1,m_2)} \times y</script><p>转化为同余关系得</p>
<script type="math/tex; mode=display">
x \equiv r_1 + inv(\frac{m_1}{\gcd(m_1,m_2)},\frac{m_2}{\gcd(m_1,m_2)}) \times \frac{r_2-r_1}{\gcd(m_1,m_2)} \times m_1 \left(mod\;\frac{m_1 \cdot m_2}{\gcd(m_1,m_2)}\right)</script><p>终于，我们成功地将两个同余方程合并成一个同余方程：$ x \equiv r_2’ \;(mod\;m_2’)$，其中</p>
<script type="math/tex; mode=display">
r_2'= inv(\frac{m_1}{\gcd(m_1,m_2)},\frac{m_2}{\gcd(m_1,m_2)}) \% \frac{m_2}{\gcd(m_1,m_2)} \times m_1 + r_1</script></blockquote>
<script type="math/tex; mode=display">
 m_2'=\frac{m_1 \cdot m_2}{\gcd(m_1,m_2)} = lcm(m_1,m_2)</script><p>亦即 $ r_2’=k_1’ \times m_1 + r_1, m_2’=lcm(m_1,m_2)$。<br>注意：通过ext_gcd可以解出 $ k_1 $，其为模 $\frac{m_2}{\gcd(m_1,m_2)}$ 意义下的一个非负整数解，那么对于裴蜀等式 $ax+by=c$ 来说：若该方程有解，用ext_gcd求解出来的x和y的一组解是 $ x’ = \frac{c}{\gcd(a,b)}x_0,y’=\frac{c}{\gcd(a,b)}y_0$，则通解为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
x= x' + \frac{b}{\gcd(a,b)} t \\ 
y= y' - \frac{a}{\gcd(a,b)}t &t \in \mathbb{Z}
\end{matrix}\right.</script><p>综上所述，每次把两个同余式合并，求解之后得到一个新的同余式，再把新的同余式和其他的联立合并，最终就可以求出满足条件的解x。</p>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营5</title>
    <url>/posts/a9bdf429.html</url>
    <content><![CDATA[<h3 id="A-炫酷双截棍"><a href="#A-炫酷双截棍" class="headerlink" title="A.炫酷双截棍"></a>A.炫酷双截棍</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小希现在手里有一个连着的两块木条，长度分别为$ l_1,l_2 $，木条之间有一个无摩擦的连接点，木条之间可以相互转动，小希将其称之为双截棍。<br>现在小希把长为 $ l_1 $ 的木条的一端放在原点 $ (0,0) $，任意转动这两根木条，小希想知道，是否有可能通过一种转动方式使得双截棍的另一端到达指定点呢?<br>如果不能，请输出所有能到达的点中离目标点最近的距离。</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>第一行输入一个两个正整数 $ l_1,l_2 $，表示木条长度。第二行输入一个正整数T，表示询问次数。随后T行，每行两个实数 $ x_i,y_i $ 表示目标点的坐标。<br>$ l_1,l_2 \leq 1000 $<br>$ T \leq 1000 $<br>$ |x|,|y| \leq 10000 $</p>
</blockquote>
<h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><blockquote>
<p>对于每次询问，如果可以到达，输出0，如果无法到达，给出所有能到达的点中离目标点最近的距离。你的答案将被认为是正确的，如果相对误差不大于 $ 10^{-6} $。</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">23 13</span><br><span class="line">3</span><br><span class="line">15 1</span><br><span class="line">40 0</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.00000000</span><br><span class="line">4.00000000</span><br><span class="line">10.00000000</span><br></pre></td></tr></table></figure>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！有2点需要注意：①不同类型的数据使用不同类型的绝对值函数；②两个浮点数相等的判定方法：若其差的绝对值小于某个精度，则默认相等。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> precision = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> T, l1, l2, minus_a, plus_a; <span class="keyword">double</span> x, y, z;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l1, &amp;l2)) &#123;</span><br><span class="line">        minus_a = <span class="built_in">abs</span>(l1 - l2), plus_a = l1 + l2; <span class="comment">//整数用abs()函数</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</span><br><span class="line">            x = <span class="built_in">fabs</span>(x), y = <span class="built_in">fabs</span>(y); <span class="comment">//浮点数用fabs()函数</span></span><br><span class="line">            z = <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">            <span class="keyword">if</span>((minus_a &lt; z || <span class="built_in">fabs</span>(z - minus_a) &lt; precision) &amp;&amp; (z &lt; plus_a || <span class="built_in">fabs</span>(plus_a - z) &lt; precision)) <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, <span class="number">0.0</span>); <span class="comment">//如果两个实数相等，则其差的绝对值小于某个精度</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, <span class="built_in">min</span>(<span class="built_in">fabs</span>(z - minus_a), <span class="built_in">fabs</span>(z - plus_a)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-炫酷路途"><a href="#D-炫酷路途" class="headerlink" title="D.炫酷路途"></a>D.炫酷路途</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小希现在要从寝室赶到机房，路途可以按距离分为N段，第i个和i+1个是直接相连的，只需要一秒钟就可以相互到达。<br>炫酷的是，从第i个到第 $ i+2^p $ 个也是直接相连的（其中p为任意非负整数），只需要一秒钟就可以相互到达。<br>更炫酷的是，有K个传送法阵使得某些u,v之间也是直接相连的，只需要一秒钟就可以相互到达，当然，由于设备故障，可能会有一些u=v的情况发生。<br>现在小希为了赶路，她需要在最短的时间里从寝室(编号为1)到达机房(编号为N)，她不希望到达这N个部分以外的地方（不能到达位置N+1），也不能走到比自己当前位置编号小的地方（比如从5走到3是非法的）。<br>她想知道最短的时间是多少。</p>
</blockquote>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行输入两个整数N,K，表示路途的段数和传送法阵的数量。<br>从第二行开始K行，每行两个整数 $ a_i,b_i $ 表示两个位置之间相连。<br>$ 2 \leq N \leq 1000000000 $<br>$ 0 \leq K \leq 15 $</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个整数，表示从寝室到机房最短的时间是多少秒。</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 2</span><br><span class="line">1 5</span><br><span class="line">6 6</span><br><span class="line"></span><br><span class="line">17 2</span><br><span class="line">2 5</span><br><span class="line">8 9</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>补这道题新学了不少东西：①C++STL中的unique函数，注意，一般是先排序，再去重，其返回值是一个迭代器，它指向的是去重后容器中不重复序列的最后一个元素的下一个元素。②用lowbit(int x)函数求一个整数x的二进制中’1’的个数（x &amp; -x：求x的二进制中最低位1表示的10进制数）。因为从第i个到第 $ i+2^p $ 个也是直接相连的（其中p为任意非负整数），所以把两个点之间的距离 $ \sum_{p = 1}^k 2^p $ 转换成二进制，二进制中有k个1说明要走k步。③G++编译环境中，__builtin_popcount(unsigned int x)可以 $ O(1)$ 计算x的二进制中’1’的个数。题解：将所有额外连边的点再加上起点终点构成一张单独的有向图，然后计算这些点两两间的距离并求起点到终点最短路即可。</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3) <span class="comment">//吸氧</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"popcnt"</span>) <span class="comment">//加速</span></span></span><br><span class="line"><span class="comment">/**===========__builtin_xxx()函数的头文件================**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">20</span>], b[<span class="number">20</span>], dist[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_bits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//求x的二进制数中'1'的个数</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        vec.<span class="built_in">clear</span>(); <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">        vec.push_back(<span class="number">1</span>), vec.push_back(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; b[i]) swap(a[i], b[i]); <span class="comment">//保证从小的编号到大的编号</span></span><br><span class="line">            vec.push_back(a[i]), vec.push_back(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        vec.erase(unique(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">//先排序，再去重</span></span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//起点到自身的距离为0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> j = i + <span class="number">1</span>; j &lt; vec.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">                    <span class="keyword">if</span>(vec[i] == a[k] &amp;&amp; vec[j] == b[k]) dist[j] = <span class="built_in">min</span>(dist[j], dist[i] + <span class="number">1</span>); <span class="comment">//若有传送法阵，则尝试着更新最短时间</span></span><br><span class="line">                dist[j] = <span class="built_in">min</span>(dist[j] , dist[i] + __builtin_popcount(vec[j] - vec[i])); <span class="comment">//操作的时间复杂度是0(1)</span></span><br><span class="line">                <span class="comment">//dist[j] = min(dist[j] , dist[i] + count_bits(vec[j] - vec[i])); //操作的时间复杂度是O(logn)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dist[vec.<span class="built_in">size</span>() - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-炫酷划线"><a href="#E-炫酷划线" class="headerlink" title="E.炫酷划线"></a>E.炫酷划线</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>平面上有一个圆，圆环上按顺时针顺序分布着从1到n，一共n个点。<br>现在无聊的小希开始按某种顺序对其在圆内两两连线，小希尽量避免让两条线碰撞，可是有的时候，这显然避免不了。<br>现在你知道小希划线的顺序是什么，请你判断小希在最优情况下，什么时候会被迫使得线相交，输出最早的时刻（是第几条线）。</p>
</blockquote>
<h4 id="输入描述：-1"><a href="#输入描述：-1" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>数据第一行一个整数T，表示数据组数。<br>每组数据第一行输入两个整数N,M，代表点的个数和游戏进行的轮数。<br>随后M行，每行两个整数 $ a_i,b_i $，表示两个点之间连线。<br>数据保证每个点最多被连线一次。<br>$ T \leq 10 $<br>$ 1 \leq N,M \leq 100000 $<br>$ 1 \leq ai,bi \leq 100000 $</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每组数据，一行。<br>如果中途某一条线开始无法避免相交，则输出当轮轮数。<br>否则，输出-1。</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">10 4</span><br><span class="line">5 3</span><br><span class="line">1 9</span><br><span class="line">2 6</span><br><span class="line">7 10</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>题意转化为：读入一些区间，输出直到有区间交叉的第一个轮数。做法：用树状数组维护，每连一条线，给其所在区间打上不同标记，然后对区间左端点和右端点进行求和，（重点判断依据）若左端点的和等于右端点的和，说明区间中没有其他线段加入，即没有交叉区间，否则就输出当轮轮数。涨知识了！</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> T; LL n, m, a, b, tree[maxn]; <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL i = x; i &lt;= n; i += i &amp; -i) tree[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(LL i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) res += tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T)) &#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</span><br><span class="line">            n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(); flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">                a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a &gt; b) swap(a, b);</span><br><span class="line">                add(a, i), add(b + <span class="number">1</span>, -i); <span class="comment">//打标记，赋予不同值，这样才能区分是否有交叉区间</span></span><br><span class="line">                <span class="comment">//cout &lt;&lt; query(a) &lt;&lt; ' ' &lt;&lt; query(b) &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span>(query(a) != query(b)) &#123; <span class="comment">//若左端点值不等于右端点值，说明肯定有交叉区间</span></span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-炫酷数字"><a href="#G-炫酷数字" class="headerlink" title="G.炫酷数字"></a>G.炫酷数字</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小希希望你构造一个最小的正整数，使得其有n个因子。</p>
</blockquote>
<h4 id="输入描述：-2"><a href="#输入描述：-2" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>第一行一个整数T表示数据组数<br>每组数据第一行输入一个正整数n，表示其因子数。<br>$ n \leq 1000000 $<br>$ T \leq 1000000 $</p>
</blockquote>
<h4 id="输出描述：-1"><a href="#输出描述：-1" class="headerlink" title="输出描述："></a>输出描述：</h4><blockquote>
<p>输出一行一个整数，表示你构造出的这个数。注意：你需要保证你构造的数 $ \leq 10^6 $，如果在这个范围里面无法构造出一个正整数满足条件，请输出-1。</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">16</span><br></pre></td></tr></table></figure>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>做这题时第一反应就是约数个数定理，然后胡思乱想（未果，期间还尝试着用dfs写，但感觉情况很复杂），不知如何构造这个最小正整数……赛后看了题解恍然大悟QWQ，只需通过埃氏筛法 $ O(nlog^{log^n}) $ 统计 $ 1 \sim  10^6 $ 中每个数的因子个数，然后标记一下具有 $ 1 \sim 10^6 $ 个因子对应的最小正整数即可QWQ。</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> T, n, ans[maxn], cnt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; maxn; j += i)</span><br><span class="line">            cnt[j]++; <span class="comment">//累加j的因子个数</span></span><br><span class="line">        <span class="keyword">if</span>(ans[cnt[i]] == <span class="number">-1</span>) ans[cnt[i]] = i; <span class="comment">//具有n个因子的最小正整数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T)) &#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-炫酷镜子"><a href="#I-炫酷镜子" class="headerlink" title="I.炫酷镜子"></a>I.炫酷镜子</h3><h4 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小希拿到了一个镜子块，镜子块可以视为一个N x M的方格图，里面每个格子仅可能安装<code>\</code>或者<code>/</code>的镜子,会反射90°光线，也可能没有安装镜子，使用<code>.</code>代替。<br>但她看不清楚里面的镜子构造是怎样的。<br>你是这块镜子块的主人，所以你想计算这块镜子块（从输入的上方往下射入光线）从左到右每一格射入依次分别会从最下面的哪一格子射出，如果无法射出，输出-1。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行输入两个整数N,M。随后的N行，每行M个字符。<br>$ 1 \leq N,M \leq 500 $.</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出M行整数，依次为从第i个格子从上往下射入时从下面的哪里射出，如果光线不会从下面射出，则输出-1。</p>
</blockquote>
<h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">\.\</span><br></pre></td></tr></table></figure>
<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>第一列遇到镜子两次反弹通过第三列射出。<br>第二列直接射出。<br>第三列因为镜子反弹后向右边射出。</p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>简单的dfs！一开始以为会陷入死胡同，即构成四角，就用一个vis数组标记已访问过的，然后一直WA……实际上并不会构成四角，入射到的镜子可能再次入射到，且光线一定会射出边界，所以当光线射出边界时直接判断即可。<br>注意：因为’\’是转义字符，所以判断一个字符是否为反斜杆，应为’\‘。</p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, flag; <span class="comment">//bool vis[maxn][maxn];</span></span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c_x, <span class="keyword">int</span> c_y)</span> </span>&#123; <span class="comment">//c_x，c_y 对应四种状态：上下左右</span></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">-1</span> || flag == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span> || y == <span class="number">-1</span> || y == m ) &#123;flag = <span class="number">-1</span>; <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x == n) &#123;flag = <span class="number">1</span>; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, y + <span class="number">1</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">//if(vis[x][y]) return; //无需标记是否已访问，因为光线肯定不会陷入死胡同，并且一定射出边界</span></span><br><span class="line">    <span class="comment">//vis[x][y] = true;</span></span><br><span class="line">    <span class="keyword">if</span>(mp[x][y] == <span class="string">'.'</span>) dfs(x + c_x, y + c_y, c_x, c_y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mp[x][y] == <span class="string">'/'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c_x == <span class="number">1</span> &amp;&amp; c_y == <span class="number">0</span>) dfs(x, y - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>); <span class="comment">//下---&gt;左</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_x == <span class="number">-1</span> &amp;&amp; c_y == <span class="number">0</span>) dfs(x, y + <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//上---&gt;右</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_x == <span class="number">0</span> &amp;&amp; c_y == <span class="number">1</span>) dfs(x - <span class="number">1</span>, y, <span class="number">-1</span>, <span class="number">0</span>); <span class="comment">//右---&gt;上</span></span><br><span class="line">        <span class="keyword">else</span> dfs(x + <span class="number">1</span>, y, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//左---&gt;下</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// mp[x][y] = '\\'</span></span><br><span class="line">        <span class="keyword">if</span>(c_x == <span class="number">1</span> &amp;&amp; c_y == <span class="number">0</span>) dfs(x, y + <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//下---&gt;右</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_x == <span class="number">-1</span> &amp;&amp; c_y == <span class="number">0</span>) dfs(x, y - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>); <span class="comment">//上---&gt;左</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_x == <span class="number">0</span> &amp;&amp; c_y == <span class="number">1</span>) dfs(x + <span class="number">1</span>, y, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//右---&gt;下</span></span><br><span class="line">        <span class="keyword">else</span> dfs(x - <span class="number">1</span>, y, <span class="number">-1</span>, <span class="number">0</span>); <span class="comment">//左---&gt;上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//memset(vis, false, sizeof(vis));</span></span><br><span class="line">            dfs(<span class="number">0</span>, j, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J-炫酷数学"><a href="#J-炫酷数学" class="headerlink" title="J.炫酷数学"></a>J.炫酷数学</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>小希最近想知道一个东西，就是A+B=A|B(其中|为按位或)的二元组有多少个。<br>当然，直接做这个式子对小希来说太难了，所以小希改变了一些条件，她仅想知道其中 $ A,B &lt; N $ 的情况，其中N为2的幂次。<br>当然，(A=1,B=0)和(A=0,B=1)被认为是不同的二元组。</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行输入一个非负整数M。<br>$ N=2M,M \leq 100 $，即2的M次为N。</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个整数ans，对998244353取模。</p>
</blockquote>
<h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line"></span><br><span class="line">71</span><br></pre></td></tr></table></figure>
<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">588378066</span><br></pre></td></tr></table></figure>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！打表找规律：$ 3^m $。python大法好，简单粗暴！</p>
</blockquote>
<h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pow(<span class="number">3</span>,int(input()),<span class="number">998244353</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
  <entry>
    <title>（扩展）中国剩余定理例题汇总</title>
    <url>/posts/c20e7b39.html</url>
    <content><![CDATA[<h3 id="luogu-P3868-TJOI2009-猜数字"><a href="#luogu-P3868-TJOI2009-猜数字" class="headerlink" title="luogu P3868.[TJOI2009]猜数字"></a>luogu P3868.[TJOI2009]猜数字</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>现有两组数字，每组k个，第一组中的数字分别为：$ a_1,a_2,\cdots,a_k $ 表示，第二组中的数字分别用 $ b_1,b_2,\cdots,b_k$ 表示。其中第二组中的数字是两两互素的。求最小的非负整数n，满足对于任意的 $ i,n - a_i $ 能被 $ b_i $ 整除。</p>
</blockquote>
<a id="more"></a>
<h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><blockquote>
<p>输入数据的第一行是一个整数 $ k,(1\leq k \leq 10)$。接下来有两行，第一行是：$ a_1,a_2,\cdots,a_k $，第二行是$ b_1,b_2,\cdots,b_k$。</p>
</blockquote>
<h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><blockquote>
<p>输出所求的整数n。</p>
</blockquote>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2 3 5</span><br></pre></td></tr></table></figure>
<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>所有数据中，第一组数字的绝对值不超过 $ 10^9 $（可能为负数），第二组数字均为不超过6000的正整数，且第二组里所有数的乘积不超过 $ 10^{18} $。每个测试点时限1秒。<br>注意：对于C/C++语言，对64位整型数应声明为long long，如使用scanf, printf函数（以及fscanf, fprintf等），应采用%lld标识符。</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>要使得 $ b_i | (n-a_i) $，则有 $n\equiv a_i \;(mod\; b_i)$，即问题求解转化为裸的中国剩余定理。<br>为避免数据溢出，要处理一下两个坑点：①余数都要先处理为绝对值最小的整数；②因为直接乘法取模容易发生数据溢出，所以要改为快速乘法取模运算！</p>
</blockquote>
<h4 id="AC代码1："><a href="#AC代码1：" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">LL n, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mul</span><span class="params">(LL a, LL b, LL mod)</span></span>&#123;<span class="comment">//快速乘法，防止两数相乘爆long long，时间复杂度为log(b)</span></span><br><span class="line">    LL res = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =(res + a) % mod;</span><br><span class="line">        a = (a + a) % mod; <span class="comment">//每次乘2</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123; <span class="comment">//中国剩余定理</span></span><br><span class="line">    LL lcm = <span class="number">1L</span>L, res = <span class="number">0L</span>L, M_i, x, y;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) lcm *= m[i]; <span class="comment">//先求出所有方程的最小公倍数</span></span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        M_i = lcm / m[i];</span><br><span class="line">        ext_gcd(M_i, m[i], x, y);</span><br><span class="line">        x = (x % m[i] + m[i]) % m[i]; <span class="comment">//取最小非负整数解</span></span><br><span class="line">        <span class="comment">//res = (res + r[i] * M_i * x) % lcm;</span></span><br><span class="line">        res = (res + quick_mul(quick_mul(M_i, r[i], lcm), x, lcm)) % lcm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; m[i], r[i] = (r[i] % m[i] + m[i]) % m[i]; <span class="comment">//余数的绝对值不超过模数的绝对值</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; crt(r, m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2："><a href="#AC代码2：" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">LL n, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ext_crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123; <span class="comment">//扩展中国剩余定理</span></span><br><span class="line">    LL lcm = m[<span class="number">0</span>], res = r[<span class="number">0</span>], x, y, gcd, mod;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        gcd = ext_gcd(lcm, m[i], x, y);</span><br><span class="line">        <span class="keyword">if</span>((r[i] - res) % gcd) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x *= (r[i] - res) / gcd;</span><br><span class="line">        mod = m[i] / gcd;</span><br><span class="line">        x = (x % mod + mod) % mod;</span><br><span class="line">        res = res + lcm * x;</span><br><span class="line">        lcm = lcm / gcd * m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; m[i], r[i] = (r[i] % m[i] + m[i]) % m[i]; <span class="comment">//余数的绝对值不超过模数的绝对值</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ext_crt(r, m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="poj-2891-Strange-Way-to-Express-Integers"><a href="#poj-2891-Strange-Way-to-Express-Integers" class="headerlink" title="poj 2891 Strange Way to Express Integers"></a>poj 2891 Strange Way to Express Integers</h3><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>Elina is reading a book written by Rujia Liu, which introduces a strange way to express non-negative integers. The way is described as following:<br>Choose k different positive integers $ a_1,a_2,\cdots,a_k $. For some non-negative m, divide it by every $a_i (1 \leq i \leq k)$ to find the remainder ri. If $ a_1,a_2,\cdots,a_k $ are properly chosen, m can be determined, then the pairs $(a_i, r_i) $ can be used to express m.<br>“It is easy to calculate the pairs from m, ” said Elina. “But how can I find m from the pairs?”<br>Since Elina is new to programming, this problem is too difficult for her. Can you help her?</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The input contains multiple test cases. Each test cases consists of some lines.<br>Line 1: Contains the integer k.<br>Lines $ 2 \sim k + 1 $: Each contains a pair of integers $a_i, r_i (1 \leq i \leq k) $.</p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>Output the non-negative integer m on a separate line for each test case. If there are multiple possible values, output the smallest one.<br>If there are no possible values, output -1.</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">8 7</span><br><span class="line">11 9</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure>
<h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><blockquote>
<p>All integers in the input and the output are non-negative and can be represented by 64-bit integral types.</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>裸的扩展中国剩余定理。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">LL n, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ext_crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123;</span><br><span class="line">    LL lcm = m[<span class="number">0</span>], res = r[<span class="number">0</span>], x, y, gcd, mod;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        gcd = ext_gcd(lcm, m[i], x, y);</span><br><span class="line">        <span class="keyword">if</span>((r[i] - res) % gcd) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x *= (r[i] - res) / gcd;</span><br><span class="line">        mod = m[i] / gcd;</span><br><span class="line">        x = (x % mod + mod) % mod;</span><br><span class="line">        res = res + lcm * x;</span><br><span class="line">        lcm = lcm / gcd * m[i]; <span class="comment">//先除后乘，避免数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; m[i] &gt;&gt; r[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ext_crt(r, m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-1573-X问题"><a href="#hdu-1573-X问题" class="headerlink" title="hdu 1573 X问题"></a>hdu 1573 X问题</h3><h4 id="Problem-Description-1"><a href="#Problem-Description-1" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>求在小于等于N的正整数中有多少个X满足：X mod a[0] = b[0], X mod a[1] = b[1], X mod a[2] = b[2], …, X mod a[i] = b[i], … (0 &lt; a[i] &lt;= 10)。</p>
</blockquote>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>输入数据的第一行为一个正整数T，表示有T组测试数据。每组测试数据的第一行为两个正整数 $N,M (0 &lt; N \leq 1000000000, 0 &lt; M \leq 10)$，表示X小于等于N，数组a和b中各有M个元素。接下来两行，每行各有M个正整数，分别为a和b中的元素。</p>
</blockquote>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>对应每一组输入，在独立一行中输出一个正整数，表示满足条件的X的个数。</p>
</blockquote>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">10 3</span><br><span class="line">1 2 3</span><br><span class="line">0 1 2</span><br><span class="line">100 7</span><br><span class="line">3 4 5 6 7 8 9</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">10000 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>裸的扩展中国剩余定理。</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">LL T, n, k, tot, ans, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ext_crt</span><span class="params">(LL *r, LL *m, LL n, LL sum)</span> </span>&#123;</span><br><span class="line">    LL lcm = m[<span class="number">0</span>], res = r[<span class="number">0</span>], x, y, gcd, mod;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        gcd = ext_gcd(lcm, m[i], x, y);</span><br><span class="line">        <span class="keyword">if</span>((r[i] - res) % gcd) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x *= (r[i] - res) / gcd;</span><br><span class="line">        mod = m[i] / gcd;</span><br><span class="line">        x = (x % mod + mod) % mod;</span><br><span class="line">        res = res + lcm * x;</span><br><span class="line">        lcm = lcm / gcd * m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; sum) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (sum - res) / lcm + (res != <span class="number">0</span>); <span class="comment">//求解res + lcm * k ≤ sum</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T) &#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tot &gt;&gt; n;</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; m[i];</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">            ans = ext_crt(r, m, n, tot);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (ans == <span class="number">-1</span> ? <span class="number">0</span> : ans)  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-3579-Hello-Kiki"><a href="#hdu-3579-Hello-Kiki" class="headerlink" title="hdu 3579 Hello Kiki"></a>hdu 3579 Hello Kiki</h3><h4 id="Problem-Description-2"><a href="#Problem-Description-2" class="headerlink" title="Problem Description"></a>Problem Description</h4><blockquote>
<p>One day I was shopping in the supermarket. There was a cashier counting coins seriously when a little kid running and singing “门前大桥下游过一群鸭，快来快来 数一数，二四六七八”. And then the cashier put the counted coins back morosely and count again…<br>Hello Kiki is such a lovely girl that she loves doing counting in a different way. For example, when she is counting X coins, she count them N times. Each time she divide the coins into several same sized groups and write down the group size $ M_i $ and the number of the remaining coins $ A_i $ on her note.<br>One day Kiki’s father found her note and he wanted to know how much coins Kiki was counting.</p>
</blockquote>
<h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><blockquote>
<p>The first line is T indicating the number of test cases.<br>Each case contains N on the first line, $ M_i(1 \leq i \leq N)$ on the second line, and corresponding $ A_i(1 \leq i \leq N)$ on the third line.<br>All numbers in the input and output are integers.<br>$ 1 \leq T \leq 100, 1 \leq N \leq 6, 1 \leq M_i \leq 50, 0 \leq A_i &lt; M_i $</p>
</blockquote>
<h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><blockquote>
<p>For each case output the least positive integer X which Kiki was counting in the sample output format. If there is no solution then output -1.</p>
</blockquote>
<h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">14 57</span><br><span class="line">5 56</span><br><span class="line">5</span><br><span class="line">19 54 40 24 80</span><br><span class="line">11 2 36 20 76</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1: 341</span><br><span class="line">Case 2: 5996</span><br></pre></td></tr></table></figure>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>裸的扩展中国剩余定理。注意：求最小的正整数解。</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line">LL T, n, k, ans, r[maxn], m[maxn];</span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;x = <span class="number">1L</span>L; y = <span class="number">0L</span>L; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    LL res = ext_gcd(b, a % b, x, y);</span><br><span class="line">    LL tmp = x; x = y, y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ext_crt</span><span class="params">(LL *r, LL *m, LL n)</span> </span>&#123;</span><br><span class="line">    LL lcm = m[<span class="number">0</span>], res = r[<span class="number">0</span>], x, y, gcd, mod;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        gcd = ext_gcd(lcm, m[i], x, y);</span><br><span class="line">        <span class="keyword">if</span>((r[i] - res) % gcd) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x *= (r[i] - res) / gcd;</span><br><span class="line">        mod = m[i] / gcd;</span><br><span class="line">        x = (x % mod + mod) % mod;</span><br><span class="line">        res = res + lcm * x;</span><br><span class="line">        lcm = lcm / gcd * m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ? res : (res + lcm); <span class="comment">//求最小的正整数解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T) &#123;</span><br><span class="line">        <span class="keyword">for</span>(LL cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; m[i];</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ext_crt(r, m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法训练</category>
      </categories>
      <tags>
        <tag>（扩展）中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营2</title>
    <url>/posts/37d9618a.html</url>
    <content><![CDATA[<h3 id="A-处女座的签道题"><a href="#A-处女座的签道题" class="headerlink" title="A.处女座的签道题"></a>A.处女座的签道题</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>平面上有n个点，问：平面上所有三角形面积第k大的三角形的面积是多少?</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行T，表示样例的个数。<br>对于每一组样例，第一行两个整数n和k，<br>接下来n行，每行两个整数x,y表示点的坐标<br>$ T \leq 80,3 \leq n \leq 100, -10^9 \leq x,y \leq 10^9 $.<br>对于每一组样例，保证任意两点不重合，且能构成的三角形的个数不小于k</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每一组样例，输出第k大三角形的面积，精确到小数点后两位（四舍五入）。</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4 3</span><br><span class="line">1 1</span><br><span class="line">0 0</span><br><span class="line">0 1</span><br><span class="line">0 -1</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.50</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>样例中一共能构成3个三角形，面积分别为0.5，0.5，和1，面积第3大的为0.5。</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>①高中知识：向量叉积求三角形面积：</p>
<p><script type="math/tex">S_{\Delta ABC} = \frac{1}{2} \times |\vec{a} \times \vec{b}| = \frac{1}{2} \cdot |\vec{a}| \cdot |\vec{b}| \cdot sin <\vec{a}, \vec{b}></script>。<br>设 <script type="math/tex">A(x_1, y_1), B(x_2, y_2), C(x_3, y_3), \vec{AB} = (x_2 - x_1, y_2 - y_1), \vec{AC} = (x_3 - x_1, y_3 - y_1)</script>，则 <script type="math/tex">S_{\Delta ABC} = \frac{1}{2} \times |\vec{AB} \times \vec{AC}| = \frac{1}{2} \cdot |(x_2 - x_1)(y_3 - y_1) - (y_2 - y_1)(x_3 - x_1)|</script>.<br>②<code>nth_element</code>C++标准库函数的运用：此题中，如果 $ n = 100 $，那么最多大约能构成 $ 1.6 \times 10^5 $ 个三角形。因要求第k大的三角形面积，若直接调用sort排序（$ O(nlog^n) $）大约是 $ 2.7 \times 10^6 $ 级别。若80组测试数据中n都是100，那么将是 $ 2.1 \times 10^8 $ 级别，显然这就太慢了，自测了牛客评测机，93.3%的通过率。此时就要考虑用快排或者是nth_element函数，其期望时间复杂度都是 $ O(n) $。nth_element $ (first,k^{th} - 1,last) $ 表示的是将第k小的元素放在 $ k^{th} - 1 $这个位置上，注意数组下标是从0开始的，即 $ k^{th} $ 这个位置上的元素是第 $ (k^{th} -first + 1) $ 小的（注意first是第1小的，一般first为0）。<br>③最后要注意的就是精度问题：因为 $ x, y $ 的值相乘之后大可能会达到 $ 10^{18} $，无法用double存，所以最后需要特判 “ .00” 或者 “ .50”。<br>备注：<code>float</code>： $ 2^{23} = 8388608 $，一共7位，意味着最多能有7位有效数字，但绝对能保证为6位，即float的精度位6~7位有效数字；<br><code>double</code>：$ 2^{52} = 4503596927370496 $，一共16位，即double的精度为15~16位。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> T, n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>LL x,y;&#125;nod[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">cross</span><span class="params">(node p0,node p1,node p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T)) &#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k); vec.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;nod[i].x, &amp;nod[i].y);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n - <span class="number">1</span>; ++j)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">                        vec.push_back(cross(nod[i], nod[j], nod[k]));</span><br><span class="line">            nth_element(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">begin</span>() + k - <span class="number">1</span>, vec.<span class="built_in">end</span>(), greater&lt;LL&gt;()); <span class="comment">//求数组中第k大元素，因为数组从下标0开始，所以实际位置是k - 1</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld"</span>, vec[k - <span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">puts</span>(vec[k - <span class="number">1</span>] &amp; <span class="number">1</span> ? <span class="string">".50"</span> : <span class="string">".00"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-处女座与cf"><a href="#B-处女座与cf" class="headerlink" title="B.处女座与cf"></a>B.处女座与cf</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>众所周知，处女座经常通过打cf来调节自己的心情。今天处女座又参加了一场cf的比赛，他知道了所有的提交记录，他想知道自己的得分和排在第几名。你知道处女座的cf账号是cnz。Codeforces规则如下：<br>1.比赛一共2小时；<br>2.比赛有5题，A题500分，B题1000分，C题1500分，D题2000分，E题2500分；<br>3.得分规则如下：<br>在第0分钟完成某一题可以得到全部的分数，每过一分钟每题的分值会衰减1/250，比如在第3分钟完成A题，能够得到 <script type="math/tex">500 - 2 * 3 = 494</script> 分；<br>4.如果一道题是的返回结果WA或者TLE被称为错误的提交，<code>CE视为无效的提交</code>，AC，WA和TLE 都视为有效的提交。如果一道题你最后通过了，你会得到这道题衰减之后的分值再减去你错误提交次数 <script type="math/tex">* 50</script>，就是每次错误的提交会有50分的罚时。<br>5.如果你通过了一道题，你的得分不会低于该题分值的30%。比如你在第50分钟通过了A，你有7次错误的提交，你的得分为 <script type="math/tex">max(500 * 0.3, 500 - 2 * 50</script> (得分衰减) - <script type="math/tex">7 * 50</script>(错误提交的罚时)) <script type="math/tex">= 150</script> 分。<br>6.<code>由于hack机制的存在，你每进行一次提交，对于这一题之前的有效提交(AC,WA,TLE)都视为错误的提交。</code><br>7.<code>一个人只有提交(AC,WA,TLE,CE)过代码，才被视为参加比赛</code>。<br>处女座又了解到一些信息：本场比赛没有任何选手hack别人，并且没有任何的提交fst（即只要是某题的最后一次提交通过，就视为通过这道题）。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个整数n和m，n为报名比赛的人数，m为提交的个数<br>接下来n行，每行一个字符串，表示报名比赛的人的昵称。（字符串只包含小写字母，且长度小于20）<br>接下来m行，每行的格式为Time，Submiter，Problem，Verdict。<br>Time为提交的时间，是1到120中的一个正整数（包含1和120）,保证Time按顺序给出<br>Submiter为提交者昵称<br>Problem为题目名称，是’A’,’B’,’C’,’D’,’E’中的一个字母。<br>Verdict为返回的结果，为”AC”,”WA”,”TLE”,”CE”中的一个。<br>$ 2 \leq n \leq 500 $<br>$ 1 \leq m \leq 10000 $</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果处女座参加了比赛,输出两行:<br>第一行为处女座的得分；第二行格式x/y,其中x为处女座的排名，y为参加比赛的总人数。如果分数相同那么排名并列。如果处女座没有参加比赛，输出”-1”。</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 7</span><br><span class="line">cnz</span><br><span class="line">cuber</span><br><span class="line">moon</span><br><span class="line">3 cnz A AC</span><br><span class="line">5 cuber A AC</span><br><span class="line">6 cnz B CE</span><br><span class="line">10 cuber C AC</span><br><span class="line">20 cnz B AC</span><br><span class="line">30 cuber D TLE</span><br><span class="line">100 cnz E AC</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2914</span><br><span class="line">1/2</span><br></pre></td></tr></table></figure>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>细节模拟题，主要有3个坑点。<br>坑点1：如果一个人AC了D题，后来再次提交的状态为WA或者是CE或者是TLE，之前AC的分数应归0；<br>坑点2：如果分数相同，则其名次应该是相同的，并且下一个不同的分数依旧按前面有效人数来计数，举个栗子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分数：  3  2  2  1</span><br><span class="line">排名：  1  2  2  4</span><br></pre></td></tr></table></figure></p>
<p>从样例来看，分数为1的排名应该是4，而不是3！！！<br>坑点3：过滤掉没有提交的选手！！！<br>这道题模拟题大佬们都是放最后才AC的，显然比赛策略应该先过掉简单的，再来考虑复杂的。QWQ</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, m, t, vid, pos, cnt, ans, a[<span class="number">5</span>] = &#123;<span class="number">500</span>, <span class="number">1000</span>, <span class="number">1500</span>, <span class="number">2000</span>, <span class="number">2500</span>&#125;, b[<span class="number">5</span>] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, c[<span class="number">5</span>] = &#123;<span class="number">150</span>, <span class="number">300</span>, <span class="number">450</span>, <span class="number">600</span>, <span class="number">750</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> name, stat, str; <span class="keyword">bool</span> flag; <span class="keyword">char</span> id; <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp; <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; my;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> sum, socre[<span class="number">5</span>], times[<span class="number">5</span>]; <span class="keyword">bool</span> vis; <span class="built_in">string</span> man;&#125;nod[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.sum &gt; y.sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>; vid = <span class="number">0</span>; mp.<span class="built_in">clear</span>(); my.<span class="built_in">clear</span>(); cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">"cnz"</span>) flag = <span class="literal">true</span>;</span><br><span class="line">            mp[str] = i;</span><br><span class="line">            <span class="built_in">memset</span>(nod[i].times, <span class="number">0</span>, <span class="keyword">sizeof</span>(nod[i].times));</span><br><span class="line">            <span class="built_in">memset</span>(nod[i].socre, <span class="number">0</span>, <span class="keyword">sizeof</span>(nod[i].socre));</span><br><span class="line">            nod[i].vis = <span class="literal">false</span>;</span><br><span class="line">            nod[i].man = str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; name &gt;&gt; id &gt;&gt; stat;</span><br><span class="line">            <span class="keyword">if</span>(!nod[mp[name]].vis) nod[mp[name]].vis = <span class="literal">true</span>, vid++;</span><br><span class="line">            <span class="keyword">if</span>(stat == <span class="string">"AC"</span>)</span><br><span class="line">                nod[mp[name]].socre[id - <span class="string">'A'</span>] = <span class="built_in">max</span>(c[id - <span class="string">'A'</span>], a[id - <span class="string">'A'</span>] - b[id - <span class="string">'A'</span>] * t - <span class="number">50</span> * nod[mp[name]].times[id - <span class="string">'A'</span>]);</span><br><span class="line">            <span class="keyword">else</span> nod[mp[name]].socre[id - <span class="string">'A'</span>] = <span class="number">0</span>; <span class="comment">//坑点1</span></span><br><span class="line">            <span class="keyword">if</span>(stat != <span class="string">"CE"</span>) nod[mp[name]].times[id - <span class="string">'A'</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j)</span><br><span class="line">                    nod[i].sum += nod[i].socre[j];</span><br><span class="line">            sort(nod, nod + n, cmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!nod[i].vis) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nod[i].man == <span class="string">"cnz"</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">continue</span>; <span class="comment">//坑点3</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!my[nod[i].sum]) my[nod[i].sum] = cnt; <span class="comment">//坑点2</span></span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(nod[i].man == <span class="string">"cnz"</span>) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; nod[i].sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; my[nod[i].sum] &lt;&lt; <span class="string">"/"</span> &lt;&lt; vid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-处女座的砝码"><a href="#C-处女座的砝码" class="headerlink" title="C.处女座的砝码"></a>C.处女座的砝码</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>处女座热爱做物理实验，为了实验，处女座必须要精确的知道物品的质量。处女座准备自己设计一套砝码，每一个砝码都是正整数，这套砝码必须能够精确测量出n以内所有正整数的质量，处女座想要知道至少需要多少个砝码。你可以在天平的任意一边放置砝码。</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>一行，一个正整数 $ n, 1 \leq n \leq 10^{1000} $.</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个整数，表示最少的砝码数。</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>你可以选择1，2，6，11<br>1=1<br>2=2<br>3=1+2<br>4=6-2<br>5=6-1<br>6=6<br>7=6+1<br>8=6+2<br>9=6+2+1<br>10=11-1<br>11=11<br>12=11+1<br>13=11+2<br>14=11+2+1<br>15=11+6-2<br>16=11+6-1<br>17=11+6<br>18=11+6+1<br>19=11+6+2<br>20=11+6+2+1</p>
</blockquote>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>本以为这道题比较难，加上赛中后面G、H两道简单题没写出来，于是就自闭不想了，QWQ，吸取教训，以后做不出来的先放一边，先做其他题目，毕竟有5个小时这么长，还有心态要好。赛后想了一下，发现还是挺简单的，主要是找找规律：（考虑每个砝码的质量）<br>①1g的砝码肯定是需要的，此时能精确测量的物品质量范围为 $ [1, 1] $。<br>②假设第二个砝码是 $ x g $，那么和之前的 $ 1 g $  砝码能精确地测量出的范围最小值是 $ x - 1 $， 最大值是 $ x + 1 $，因为当前2个砝码能测出的范围一定是 $ [1, x + 1] $，也就是说区间是连续的，为了不和之前区间有交叉，则 $ x - 1 = 2 $，即 $ x = 3 $，所以第二个砝码的质量最大只能是 $ 3 g $。如果是 $ 4 g $，显然不能测出2这个正整数。<br>③继续枚举，由上可知 $ 1 g, 3 g $ 砝码能测出的最大范围是 $ [1, 4] $。现假设第3个砝码的质量为 $ y \; g $，则和之前2个砝码能测出的范围最小值是 $ y - 4 $，最大值是 $ y + 4 $，为了使用更少的砝码数，每加一个砝码后其新增的能测出的范围应该不与之前区间有交叉，则 $ y - 4 = 5 $，即 $ y = 9 $，所以第3个砝码的最大值只能是 $ 9 g $。如果是 $ 10 g $，那么就不能测出5这个正整数。所以由 $ 1 g, 3 g, 9 g $ 的砝码能精确地测量出 $ [1, 13] $ 内的每个正整数……<br>④按照此策略一直枚举下去，我们就可以发现每个砝码的质量的最大值都是3的幂次倍数，即 $ 1 - k $ 个砝码的质量分别是 $ 3^0, 3^1, 3^2, 3^3, \cdots 3^{k - 1} $，对应能测出的范围最大值分别是 $ 1, 4, 13, \cdots \frac{3^k - 1}{2}$。于是这题的规律就推出来了……最后，虽然题目中的n最大是 $ 10^{1000} $，但由于3的幂指数是爆炸式增长的，所以可以直接循环求和，没有必要取对数这么复杂的操作还容易发生精度误差的问题，java大数简单对拍即可！！！</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger n = scan.nextBigInteger();</span><br><span class="line">        BigInteger sum = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">        BigInteger mul = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">        BigInteger k = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>); </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum.compareTo(n) == -<span class="number">1</span>)&#123; <span class="comment">//sum &lt; n ---&gt; 相等就跳出</span></span><br><span class="line">            ans++; <span class="comment">//砝码个数---&gt;对应其能测出的最大范围</span></span><br><span class="line">            sum = sum.add(mul);</span><br><span class="line">            mul = mul.multiply(k);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-处女座与重修费"><a href="#D-处女座与重修费" class="headerlink" title="D.处女座与重修费"></a>D.处女座与重修费</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>期末考试结束了，处女座发现很多人挂了大物，只能等着第二年重修，还要交400元的重修费。处女座突然想起有个学长和他讲过，如果学校哪一年缺钱了，那一年的大物试卷就会特别难。现在处女座有了所有人的成绩，处女座想知道如果所有挂科的人都在第二年重修，学校能赚多少重修费？<br>挂科是指一门课的分数小于60分。</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行一个整数n，表示考试的人数。<br>第二行n个整数，表示每个人的成绩。$ 1 \leq n \leq 10000 $。<br>学生的成绩为 $ 0-100 $（包括0和100）之间的整数。</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一行，学校能赚的重修费用。</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">60</span><br><span class="line">56</span><br><span class="line">100</span><br><span class="line">59</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">800</span><br></pre></td></tr></table></figure></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><blockquote>
<p>签道题！</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,x,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">60</span>) ans++;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans * <span class="number">400</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-处女座与复读机"><a href="#G-处女座与复读机" class="headerlink" title="G.处女座与复读机"></a>G.处女座与复读机</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>一天，处女座在牛客算法群里发了一句“我好强啊”，引起无数的复读，可是处女座发现复读之后变成了“处女座好强啊”。处女座经过调查发现群里的复读机都是失真的复读机，会固定的产生两个错误。一个错误可以是下面的形式之一：<br>1.将任意一个小写字母替换成另外一个小写字母；<br>2.在任意位置添加一个小写字母；<br>3.删除任意一个字母；<br>处女座现在在群里发了一句话，他收到了一个回应，他想知道这是不是一个复读机。</p>
</blockquote>
<h4 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>两行，第一行是处女座说的话s，第二行是收到的回应t<br>s和t只由小写字母构成且长度小于100。</p>
</blockquote>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果这可能是一个复读机输出”YES”，否则输出”NO”。</p>
</blockquote>
<h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">abcde</span><br><span class="line"></span><br><span class="line">abcde</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line"></span><br><span class="line">YES</span><br></pre></td></tr></table></figure>
<h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>样例1：abc-&gt;abcd-&gt;abcde<br>样例2：abcde-&gt;abcdd-&gt;abcde</p>
</blockquote>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>只要能经过两步变换就从s得到t就有可能是复读机。</p>
</blockquote>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>第二场比赛的dp，没想到用dfs，直接模拟，然后一直WA，进而自闭，QWQ……以后要像大佬一样多涨点暴搜技能(流下了不做题的眼泪)。这道题一开始的想法是求最长公共子序列的长度，但是WA，赛后有位OI大佬给出一组hack数据：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abxyabcd</span><br><span class="line">ababxycd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可知上面的LCS为6，$ 8 - 6 \leq 2 $，输出是YES，实际上是NO，原因就是<code>LCS没办法考虑位置</code>。题目给的字符串长度最大只有100，最简单的做法就是暴力搜索啦，get！！！</p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> len1, len2;<span class="keyword">char</span> s1[maxn], s2[maxn]; <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> la, <span class="keyword">int</span> lb, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; <span class="number">2</span> || flag || la &gt; len1 || lb &gt; len2) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(la == len1 &amp;&amp; lb == len2) &#123;flag = <span class="literal">true</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s1[la] == s2[lb]) dfs(la + <span class="number">1</span>, lb + <span class="number">1</span>, cnt); <span class="comment">//跳过</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dfs(la + <span class="number">1</span>, lb + <span class="number">1</span>, cnt + <span class="number">1</span>); <span class="comment">//替换</span></span><br><span class="line">        dfs(la + <span class="number">1</span>, lb, cnt + <span class="number">1</span>); <span class="comment">//删除</span></span><br><span class="line">        dfs(la, lb + <span class="number">1</span>, cnt + <span class="number">1</span>); <span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2) &#123;</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(s1), len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">        flag = <span class="literal">false</span>; <span class="comment">//不是复读机</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(len1 - len2) &lt;= <span class="number">2</span>) dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">puts</span>(flag ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H-处女座的测验（一）"><a href="#H-处女座的测验（一）" class="headerlink" title="H.处女座的测验（一）"></a>H.处女座的测验（一）</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>处女座进行了一场c语言的考试，要求很简单，输出2000个正整数，并且满足以下条件：<br>1.任意两个数互质；<br>2.任意两个数 $ x,y $，满足 $ \tau(x * y) &gt; 10 $，其中 $ \tau(n) $ 为n的因子的个数；<br>举例：6的因子有1，2，3，6，所以  $ \tau(6) &gt; 10 $。</p>
</blockquote>
<h4 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>本题没有输入</p>
</blockquote>
<h4 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>2000行，每行一个正整数。输出的每个整数都必须在 $ 1 - 4 * 10^8 $ 之间，如果有多组答案，输出任意一组即可。</p>
</blockquote>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h4><blockquote>
<p>任意两个数互质，显然只能是素数，又因为任意两个数要满足其乘积的因子个数大于10，根据约数个数定理 <script type="math/tex">\tau(n) = \prod_{j = 1}^k (a_j + 1)</script> 可知一个数只需由两个素数组合而成，但不是任意的组合，因为题目中还有规定每个整数必须在 <script type="math/tex">1 - 4 * 10^8</script>，而且只需输出2000个整数。为了尽可能组成较小且满足条件的数字，就让第1个素数和第4000个素数匹配，第2个素数和第3999个素数匹配……也就是先筛选出4000个素数，然后首尾两两组合并输出，最后一个数肯定是这些数中最大的，检验一下其 <script type="math/tex">(302446877 = 3 * 10^8)</script> 不超过 <script type="math/tex">4 * 10^8</script>，即这种组合策略是正确的。QWQ</p>
</blockquote>
<h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4005</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">50000</span> &amp;&amp; cnt &lt; <span class="number">4000</span>; ++i) <span class="comment">//筛选出4000个素数</span></span><br><span class="line">        <span class="keyword">if</span>(check(i)) prime[cnt++] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; prime[i] * prime[<span class="number">3999</span> - i] &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-处女座的测验（二）"><a href="#I-处女座的测验（二）" class="headerlink" title="I.处女座的测验（二）"></a>I.处女座的测验（二）</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>现在处女座顺利的完成了测验，处女座想要知道知道自己输出的结果是否正确。他希望知道自己有自己输出的数中有多少对是不满足要求的。更具体的，处女座想知道下面程序段的答案。其中 $ \tau(n) $ 为n的因子的个数。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(τ(a[i] * a[j]) &lt;= <span class="number">10</span>) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>两行。第一行一个整数n.<br>第二行n个整数，$ a_1, a_2, \cdots, a_n $。<br>$ 2 \leq n \leq 2000, 1 \leq a_i \leq 3 * 10^8 $。</p>
</blockquote>
<h4 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一行，一个整数ans。</p>
</blockquote>
<h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">34 45 23 12 63 23 90</span><br></pre></td></tr></table></figure>
<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>不保证任意两个整数互质。</p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>显然此题与约数个数定理有关：<script type="math/tex">\tau(n) = \prod_{j = 1}^k (a_j + 1)</script>。做法：先求出每个数的所有素因子，以及素因子的次方数。重要剪枝：只要某个数中素因子种类数超过3，就将其过滤掉，因为其约数至少为 $ 2^4 = 16 $ 个，显然不满足题目条件，跳过。然后根据约数个数定理进行统计：有相同的素因子先累加其个数再计数，否则对每个素因子的个数单独计数。</p>
</blockquote>
<h4 id="AC代码：-6"><a href="#AC代码：-6" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line">LL n, ans, p1, p2, tot, a[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;LL, LL&gt; &gt; vec[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= n; ++i) vec[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">            <span class="keyword">for</span>(LL j = <span class="number">2</span>; j * j &lt;= a[i]; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    LL cnt = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(a[i] % j == <span class="number">0</span>) cnt++, a[i] /= j;</span><br><span class="line">                    vec[i].push_back(make_pair(j, cnt));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; <span class="number">1L</span>L) vec[i].push_back(make_pair(a[i], <span class="number">1L</span>L));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[i].<span class="built_in">size</span>() &gt; <span class="number">3L</span>L) <span class="keyword">continue</span>; <span class="comment">// 2^3 == 8 , 2^4 == 16 过滤掉一些数的素因子种类数超过3</span></span><br><span class="line">            <span class="keyword">for</span>(LL j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(vec[j].<span class="built_in">size</span>() &gt; <span class="number">3L</span>L) <span class="keyword">continue</span>; <span class="comment">//同上</span></span><br><span class="line">                p1 = <span class="number">0L</span>L, p2 = <span class="number">0L</span>L, tot = <span class="number">1L</span>L; </span><br><span class="line">                <span class="keyword">while</span>(p1 &lt; vec[i].<span class="built_in">size</span>() &amp;&amp; p2 &lt; vec[j].<span class="built_in">size</span>()) &#123; <span class="comment">//有相同的素因子，则累加其个数，再计数</span></span><br><span class="line">                    <span class="keyword">if</span>(vec[i][p1].first &gt; vec[j][p2].first) tot *= (vec[j][p2++].second + <span class="number">1L</span>L);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(vec[i][p1].first &lt; vec[j][p2].first) tot *= (vec[i][p1++].second + <span class="number">1L</span>L);</span><br><span class="line">                    <span class="keyword">else</span> tot *= (vec[i][p1++].second + vec[j][p2++].second + <span class="number">1L</span>L);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(p1 &lt; vec[i].<span class="built_in">size</span>()) tot *= (vec[i][p1++].second + <span class="number">1L</span>L); <span class="comment">//剩余部分</span></span><br><span class="line">                <span class="keyword">while</span>(p2 &lt; vec[j].<span class="built_in">size</span>()) tot *= (vec[j][p2++].second + <span class="number">1L</span>L);</span><br><span class="line">                <span class="keyword">if</span>(tot &lt;= <span class="number">10L</span>L) ans++; <span class="comment">//如果当前tot不超过10，则满足条件，计数器加1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J-处女座的期末复习"><a href="#J-处女座的期末复习" class="headerlink" title="J.处女座的期末复习"></a>J.处女座的期末复习</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>快要期末考试了，处女座现在有n门课程需要考试，每一门课程需要花 $ a_i $小时进行复习，考试的起始时间为$ b_i $，处女座为了考试可以不吃饭不睡觉，处女座想知道他能否复习完所有的科目（即在每一门考试之前复习完该科目）。每一门课的考试时间都为两小时。</p>
</blockquote>
<h4 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行一个整数n；<br>第二行n个整数 $ a_1,a_2,\cdots,a_n $,表示每门课需要复习的时间；<br>第三行n个整数 $ b_1,b_2,\cdots,b_n $,表示每门课考试的时间。<br>$ 1 \leq n \leq 10^5 $<br>$ 0 \leq a_i \leq 10^9 $<br>$ 0 \leq b_i \leq 10^9 $</p>
</blockquote>
<h4 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果处女座能复习完，输出”YES”，否则输出”NO”</p>
</blockquote>
<h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">0 1 1</span><br><span class="line">2 6 4</span><br></pre></td></tr></table></figure>
<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure>
<h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>在0-1小时复习第2门课，<br>在1-2小时复习第3门课，<br>在2-4小时考第1门课，<br>在4-6小时考第3门课，<br>在6-8小时考第2门课</p>
</blockquote>
<h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>考试时不能复习，保证考试时间不会重叠。复习可以拆开，只要复习时间够了即可。</p>
</blockquote>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>按考试时间升序排，如果考试的起始时间相同，则按复习时间降序排，每次以当前一门考试科目的最终时间为右边界，同时累加当前已用时间，如果已用时超过右边界，说明当前科目不能复习完，break即可。</p>
</blockquote>
<h4 id="AC代码：-7"><a href="#AC代码：-7" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, rt, now_spend; <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> need, st;</span><br><span class="line">&#125;nod[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.st != b.st) <span class="keyword">return</span> a.st &lt; b.st;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.need &gt; b.need;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; nod[i].need;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; nod[i].st;</span><br><span class="line">        sort(nod, nod + n, cmp);</span><br><span class="line">        now_spend = rt = <span class="number">0</span>; flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            rt = nod[i].st + <span class="number">2</span>;</span><br><span class="line">            now_spend += nod[i].need + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(now_spend &gt; rt) &#123;flag = <span class="literal">true</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(flag ? <span class="string">"NO"</span> : <span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营3</title>
    <url>/posts/40de511c.html</url>
    <content><![CDATA[<h3 id="B-处女座的比赛资格"><a href="#B-处女座的比赛资格" class="headerlink" title="B.处女座的比赛资格"></a>B.处女座的比赛资格</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>处女座想出去比赛，但是又不知道学校能不能给到足够的经费。然而处女座是大众粉丝，有着很好的人缘，于是他找了一个在学校管经费的地方勤工俭学偷来了一份报销标准。由于处女座是万人迷，所以他在中间途径的每一条线路上都会发生一些故事，也许是粉丝给他发了一个200元的微信红包，也许是和他的迷妹一起吃饭花了500元。<br>而经费负责人也实地考察了每一条路线，在每一条路上，也许是天降红包雨，也许是地生劫匪。每一条路上都有属于自己的奇遇。<br>而经费负责人也只能根据他的故事决定这一路批下来多少经费。他会找出从宁波到比赛地的最小花费，并以此作为标准给处女座打比赛。而处女座也会选择对他来说最小花费的路线，来节省使用。<br>处女座想知道，最终的经费是否够用，如果够还会剩下来多少钱。如果不够，他自己要自费掏出多少钱。（当然处女座和经费管理人都具有旅途中无限信贷额度，所有收入支出会在旅行结束后一起结算。）</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>输入文件第一行包含一个整数T，表示处女座要参加的比赛场数。对于每一场比赛，第一行包含两个整数N,M，分别表示旅行中的站点数（其中宁波的编号为1，比赛地的编号为N）和线路数。<br>接下来M行，每一行包含5个整数 $ u,v,c,cnz,jffzr $，分别表示从u到v有一条单向的线路，这条线路的票价为c。处女座搭乘这条线路的时候，会得到cnz元（如果为负即为失去 $ -cnz $ 元）；经费负责人搭乘这条线路的时候，会得到 $ jffzr $ 元（如果为负即为失去 $ -jffzr $ 元）。<code>行程保证不会形成环，并保证一定能从宁波到达比赛地</code>。</p>
</blockquote>
<h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><blockquote>
<p>对于每一场比赛，如果经费负责人给出的经费绰绰有余，则先在一行输出”cnznb!!!”，并在下一行输出他可以余下的经费；如果处女座的经费不够用，则先在一行输出”rip!!!”，并在下一行输出他需要自费的金额；如果经费负责人给出的经费正好够处女座用，则输出一行”oof!!!”。（所有输出不含引号）</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3 3</span><br><span class="line">1 2 300 600 -600</span><br><span class="line">2 3 100 -300 1</span><br><span class="line">1 3 200 0 0</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnznb!!!</span><br><span class="line">100</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>处女座先走第一条路再走第二条路到达，总花费100元，经费负责人走第三条路，花费200元，处女座经费剩余100元。</p>
</blockquote>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ T \leq 10 $<br>$ 2 \leq N \leq 10^5 $<br>$ 1 \leq M \leq 2 \cdot 10^5 $<br>$ 1 \leq u, v \leq N $<br>$ 0 \leq c \leq 10^9 $<br>$ −10^9 \leq cnz, jffzr \leq 10^9 $</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>这道题比赛时没来得及写，赛后补题发现挺简单的。仔细读题，行程一定不会形成环并保证一定能从宁波达到比赛地，这不就是赤裸裸的拓扑排序？！求特殊的有向无环图（DAG）上的最短路，每次更新拓扑点的邻接点到宁波（编号为1）的最小费用，显然题目中编号1的入度肯定为0，然后按照节点拓扑顺序计算最小费用，最终一定能求出达到比赛地的最小费用。两次拓扑排序。时间复杂度为 $ O(|E| + |V|)$。<br>坑点：①初始建边时，每条边的权值应为 $ z - cnz, z - jffzr $，边权为负数表示赚了，边权为正表示要缴过路费。<br>②若从宁波到达比赛地的最小花费为负数，说明赚了，即不用交过路费，则需花费的费用应为0，否则就是要交的最小过路费。因此，最终应取 $ max(0, dist[n]) $。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">1e15</span>;</span><br><span class="line">LL T, n, m, x, y, z, cnz, jffzr, indeg1[maxn], indeg2[maxn], tot1, tot2, dist1[maxn], dist2[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span></span><br><span class="line">    LL to, val;</span><br><span class="line">    EDGE(LL to, LL w) : to(to), val(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;EDGE&gt; edge1[maxn], edge2[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;LL&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cnz_topsrot</span><span class="params">(LL s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(indeg1[i] == <span class="number">0</span>) que.push(i);</span><br><span class="line">    dist1[s] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        LL u = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">for</span>(LL j = <span class="number">0</span>; j &lt; edge1[u].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            LL v = edge1[u][j].to, w = edge1[u][j].val;</span><br><span class="line">            dist1[v] = <span class="built_in">min</span>(dist1[v], dist1[u] + w);</span><br><span class="line">            <span class="keyword">if</span>(--indeg1[v] == <span class="number">0</span>) que.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0L</span>L, dist1[n]); <span class="comment">//负---赚了&lt;==&gt;0费用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">jffzr_topsrot</span><span class="params">(LL s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(indeg2[i] == <span class="number">0</span>) que.push(i);</span><br><span class="line">    dist2[s] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        LL u = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">for</span>(LL j = <span class="number">0</span>; j &lt; edge2[u].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            LL v = edge2[u][j].to, w = edge2[u][j].val;</span><br><span class="line">            dist2[v] = <span class="built_in">min</span>(dist2[v], dist2[u] + w);</span><br><span class="line">            <span class="keyword">if</span>(--indeg2[v] == <span class="number">0</span>) que.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0L</span>L, dist2[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">memset</span>(indeg1, <span class="number">0</span>, <span class="keyword">sizeof</span>(indeg1));</span><br><span class="line">        <span class="built_in">memset</span>(indeg2, <span class="number">0</span>, <span class="keyword">sizeof</span>(indeg2));</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= n; ++i) edge1[i].<span class="built_in">clear</span>(), edge2[i].<span class="built_in">clear</span>(), dist1[i] = dist2[i] = inf;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>(), z = <span class="built_in">read</span>(), cnz = <span class="built_in">read</span>(), jffzr = <span class="built_in">read</span>();</span><br><span class="line">            edge1[x].push_back(EDGE(y, z - cnz));</span><br><span class="line">            edge2[x].push_back(EDGE(y, z - jffzr));</span><br><span class="line">            indeg1[y]++, indeg2[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        tot1 = cnz_topsrot(<span class="number">1L</span>L);</span><br><span class="line">        tot2 = jffzr_topsrot(<span class="number">1L</span>L);</span><br><span class="line">        <span class="keyword">if</span>(tot1 == tot2) <span class="built_in">printf</span>(<span class="string">"oof!!!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot1 &lt; tot2) <span class="built_in">printf</span>(<span class="string">"cnznb!!!\n%lld\n"</span>, tot2 - tot1);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"rip!!!\n%lld\n"</span>, tot1 - tot2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-处女座点名"><a href="#C-处女座点名" class="headerlink" title="C.处女座点名"></a>C.处女座点名</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>处女座觉得自己手上的经费可能不太够，于是决定给牛逼学生们带家教。一天他去上课用自己的火眼金睛感觉教室里有一个学生没有来，于是他就叫学生们报出自己的学号。<br>已知这个班上的学号是从1开始连续编号的，处女座告诉你这个班上有多少人，想问问你到底是谁没有来。</p>
</blockquote>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>输入数据共两行，第一行为一个整数N，表示班上的学生数量。第二行为一行 $ N-1 $ 个整数，表示已经来的学生的学号，按升序给出。</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个整数，为没有来的学生的学号。</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 2 \leq N \leq 200000 $.</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！简单标记即可！</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> n, x, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; x, a[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!a[i])&#123;<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-处女座的训练"><a href="#D-处女座的训练" class="headerlink" title="D.处女座的训练"></a>D.处女座的训练</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>处女座靠着自己的家教本领赚够了去比赛的钱，于是开启了疯狂训练。在每个夜深人静第二天不收作业的夜晚，他都会开始刷题。”今日又是一个刷题的夜晚。”他挑选了n道题开始刷，而题太多，刷不掉，理还乱（呜呜）、自己没有解决的题目每分钟都会给他带来 $ b_i $ 的疲倦值，而解决每一道题目都需要花费 $ a_i $ 分钟的时间。<br>当然，处女座一般都是考虑清楚了再写题的，所以他在写题的时候都会精神抖擞，也就是说，当前正在写的那一题并不会给他带来任何疲劳。<br>为了迎接后天要收的作业和明天要遇到的小姐姐，他想让今晚的刷题尽可能的轻松，那请你帮他找出最小所需要的疲倦值吧。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>输入数据共包括 $ n + 1 $ 行，第一行包括一个n表示处女座今晚打算训练的题的数量。<br>接下来n行，每行包括两个整数 $ a_i, b_i $，分别表示处女座刷掉本题要花费的时间和本题每分钟会带来的疲倦值。</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一行包括一个整数，表示处女座今晚训练会产生的最小疲倦值。</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">6 1</span><br><span class="line">4 5</span><br><span class="line">4 3</span><br><span class="line">6 2</span><br><span class="line">8 1</span><br><span class="line">2 6</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">86</span><br></pre></td></tr></table></figure>
<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>先做第6个题，增加 $ (1 + 5 + 3 + 2 + 1) * 2 =  24 $ 点疲倦值，再做第2个题，增加28点疲倦值，随后依次是第 $ 3,4,1,5 $ 道题，增加 $ 16,12,6 $ 点疲倦值。总共的疲倦值是 $ 24 + 28 + 16 + 12 + 6 = 86 $ 点。</p>
</blockquote>
<h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 2 \leq N \leq 10^5 $.<br>$ 2 \leq a_i \leq 4 \cdot 10^6 $.<br>$ 1 \leq b_i \leq 1000 $.</p>
</blockquote>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>猜题+验证！出题人处女座 $ (cnznb!!!) $ 处处暗示着答案，简单计算了样例可知只需按每道题的单位疲劳值所花费的时间降序排+贪心即可！证明略。</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n; LL ans, sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>LL a, b;&#125; nod[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x.b * y.a &gt; y.b * x.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        sum = ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;++i) <span class="built_in">cin</span> &gt;&gt; nod[i].a &gt;&gt; nod[i].b, sum += nod[i].b;</span><br><span class="line">        sort(nod, nod + n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            sum -= nod[i].b;</span><br><span class="line">            ans += sum * nod[i].a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-处女座和小姐姐"><a href="#E-处女座和小姐姐" class="headerlink" title="E.处女座和小姐姐"></a>E.处女座和小姐姐</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h4><blockquote>
<p>既然昨天晚上处女座已经训练了，明天才要交作业，那今天就是平淡无奇要上课的一天了。<br>然而处女座也想自己的小姐姐了，可是这节课是老师安排座位，处女座坐在 $ (1,1) $，而小姐姐坐在 $ (n,m) $。他们之间只能通过传纸条的方式来交流感情。对于处女座而言，他上课不想过度分心，因此并不想传纸条，只在那里趁机折千纸鹤。<br>老师上课喜欢用”开火车”的方式让大家轮流回答问题，显然处女座作为 $ (1,1) $ 位，会被第一个叫起来回答，之后老师将依次叫起<br>$ (2,1),(3,1), \cdots (n,1),(n,2),(n−1,2) \cdots (1,2), \cdots $ 的人起来回答问题，每个人回答问题需要1秒。处女座在自己回答完以后会以每秒1个千纸鹤的速度折叠，在小姐姐开始回答问题的时候停止折叠。<br>处女座想知道，他这节课一共要折多少个千纸鹤？</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>输入文件包含T+1行，第一行包含一个整数T，表示用例组数。接下来T行，每行包含两个整数n,m表示小姐姐的位置和教室的大小。</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每一组用例，用一行输出一个整数，表示处女座要折的千纸鹤的个数。</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<h4 id="备注-3"><a href="#备注-3" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 2 \leq n, m \leq 1000 $.</p>
</blockquote>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！一开始把行和列看反了，多加了罚时QWQ，以后读题要细心点！！！</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> T, n, m, ans, cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T)&#123;</span><br><span class="line">        <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m; <span class="comment">//行：m，列：n</span></span><br><span class="line">            <span class="keyword">if</span>(m &amp; <span class="number">1</span>) ans = m - <span class="number">1</span> + m * (n - <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ans = m - <span class="number">1</span> + (m - <span class="number">1</span>) * (n - <span class="number">1</span>) - <span class="number">1</span> ;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-处女座和小姐姐（三）"><a href="#G-处女座和小姐姐（三）" class="headerlink" title="G.处女座和小姐姐（三）"></a>G.处女座和小姐姐（三）</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>经过了选号和漫长的等待，处女座终于拿到了给小姐姐定制的手环，小姐姐看到以后直呼666！<br>处女座其实也挺喜欢6这个数字的，实际上他做手环的时候选取的k=6。所以他对于包含数码6的数字极其敏感。每次看到像4567这样的数字的时候他的心就像触电了一样，想起了小姐姐。<br>现在你要给处女座展示一系列数字，你想知道他的内心会激动多少次。对于同一个数字，他最多只会激动一次，即如果这个数是66666，他还是只会激动一次。</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>一行包括两个数字 $ l,r $，表示你给处女座展示的数字范围为 $ [l, r] $。</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一行一个整数，表示处女座内心激动的次数。</p>
</blockquote>
<h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 20</span><br></pre></td></tr></table></figure>
<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="备注-4"><a href="#备注-4" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 0 \leq l \leq r \leq 10^{18} $.</p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>裸的数位dp！！！统计不含6的数的个数，改一下模板即可。<br>公式：<script type="math/tex">j \neq 6, dp[i][j] += \sum_{k = 0 \land k \neq 6}^9 dp[i-1][k] ; j = 6, dp[i][j] = 0</script>。</p>
</blockquote>
<h4 id="AC代码1：递归版本"><a href="#AC代码1：递归版本" class="headerlink" title="AC代码1：递归版本"></a>AC代码1：递归版本</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n, m, dp[<span class="number">20</span>][<span class="number">2</span>], d[<span class="number">20</span>];</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">bool</span> if6, <span class="keyword">bool</span> limit)</span></span>&#123; <span class="comment">//第pos位、当前数字是否含6：if6、当前数位的上一位是否为上界：limit。</span></span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; dp[pos][if6] != <span class="number">-1</span>) <span class="keyword">return</span> dp[pos][if6];</span><br><span class="line">    LL up = limit ? d[pos] : <span class="number">9</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= up; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ans += dfs(pos<span class="number">-1</span>, <span class="literal">false</span>, limit &amp;&amp; i == up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> limit ? ans : (dp[pos][if6] = ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) d[++len] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(len, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (m - solve(m)) - (n - <span class="number">1</span> - solve(n<span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2：递推版本"><a href="#AC代码2：递推版本" class="headerlink" title="AC代码2：递推版本"></a>AC代码2：递推版本</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n, m, dp[<span class="number">20</span>][<span class="number">10</span>], dit[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] += dp[i - <span class="number">1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dit, <span class="number">0</span>, <span class="keyword">sizeof</span>(dit));</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>; LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        dit[++len] = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dit[i]; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans += dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dit[i] == <span class="number">6</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (m + <span class="number">1</span>) - solve(m + <span class="number">1</span>) - (n - solve(n)) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-处女座的约会"><a href="#I-处女座的约会" class="headerlink" title="I.处女座的约会"></a>I.处女座的约会</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h4><blockquote>
<p>处女座放完了”高利贷”，拿到了不少的资金，又可以和小姐姐约会啦！（之前不还是攒钱打比赛的吗）现在处女座拿到了一份宁波市旅游地图决定和小姐姐一起去玩耍。他们来到了动物园，去参观里面的动物。但是很不幸的是，他们在游玩的途中遇到了一只恶龙。恶龙长有n个头，但经过了处女座的调教，恶龙变得善良了一些。它的n个头每个头要么仍是邪恶的头，用“1”表示，要么已经变得善良，用“0”表示，因而恶龙的n个头就可以用n位01串来表示。而此时处女座要发挥自己的勇士形象，要把所有的龙头都变成 $ 0000 \cdots 00 $ 完全善良的龙头。每一次，他可以砍掉龙最右侧的一个头，同时龙会在最左侧长出新的一个头，以保证龙头数量不变。如果他砍掉的是一个1，即邪恶的头，他可以决定龙在最左侧会长出什么样的头；但如果他砍掉了一个善良的头，那么玻璃心的恶龙将会在左侧不受控制的长出一个随机的头，既可能是善良的头，也可能是邪恶的头，而且它总会与处女座作对，尽力的破坏他的计划。<br>现在给你一个恶龙头的初始状态，即一个01串，请帮助处女座判断一下，能否在有限步之内让全部的龙头都变成善良的龙头。</p>
</blockquote>
<h4 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>输入第一行T，表示用例组数。<br>之后T行，每行一个01串S表示龙头的初始状态，“0”表示善良的头，“1”表示邪恶的头。</p>
</blockquote>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每组数据，处女座能否将全部的龙头变成善良的头，可以的话输出“cnznb”，不可以则输出“ljcnz”（不含引号）。</p>
</blockquote>
<h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1111</span><br></pre></td></tr></table></figure>
<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnznb</span><br></pre></td></tr></table></figure>
<h4 id="备注-5"><a href="#备注-5" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ T \leq 1000,|S| \leq 100 $。<br>注意，这个问题可能没有你想的那么简单。显然，处女座必须把一些1变成0，这样才能让1的数量减少并消失。但是如果只是简单的每次把1变成0，最终不见得能取胜。比如，如果龙头的状态是101，那么去掉最右边的1并选择在左边长出一个0，则龙头会变成010；再把010右边的0去掉后，如果左边仍长出一个1，则龙头又变回了101的状态，如此反复，将永远不能得到000。</p>
</blockquote>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>博弈+大胆猜想！比赛时模拟了很多样例后，发现都是处女座牛逼，大胆交一发，显然是“cnznb”，怎么会是“ljcnz”。（滑稽）相关证明：<a href="https://wenku.baidu.com/view/8337db1001f69e3143329494?tdsourcetag=s_pctim_aiomsg&amp;qq-pf-to=pcqq.group" target="_blank" rel="noopener">趣题：由0和1构成的虫子</a></p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> T; <span class="built_in">string</span> str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; T)&#123;</span><br><span class="line">        <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"cnznb"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营1</title>
    <url>/posts/aed03030.html</url>
    <content><![CDATA[<h3 id="A-小a的计算器"><a href="#A-小a的计算器" class="headerlink" title="A.小a的计算器"></a>A.小a的计算器</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>小a的数学基础实在太差了，以至于他只会用计算器算数。他的计算器比较特殊，只有 +,−,×,/ (即加减乘除)四种运算。经过一番周折，小a终于算出了他想要的数，但是他却忘记了最初的数是什么。不过幸运的是他记下了整个操作序列，他想请你帮他算出最初的数。</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个整数n,X，分别表示操作次数和最终的数<br>接下来n行表示操作序列，每行两个数opt,x，<br>若opt=1，则表示将当前数加x<br>若opt=2，则表示将当前数减x<br>若opt=3，则表示将当前数乘x<br>若opt=4，则表示将当前数除以x</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个整数表示最初的数</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 3</span><br><span class="line">2 1</span><br><span class="line">3 3</span><br><span class="line">4 2</span><br><span class="line"></span><br><span class="line">3 292</span><br><span class="line">3 2</span><br><span class="line">4 3</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line">1314</span><br></pre></td></tr></table></figure></p>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote>
<p>样例1解释：<br>$ 2 + 3 = 5 $<br>$ 5 - 1 = 4 $<br>$ 4 * 3 = 12 $<br>$ 12 / 2 = 6 $</p>
</blockquote>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ n \leq 100, 0 &lt; X \leq 10^{18}$.<br>数据保证：<br>1、 最初的数在进行操作时不会超过long long范围。<br>2、 如果你的程序合法，那么运算中所有的数均为整数，所有的除法均为整除！<br>3、 不会出现整数被0除的情况。</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>倒序模拟即可。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, opt[<span class="number">105</span>];LL y, x[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; y) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; opt[i] &gt;&gt; x[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(opt[i] == <span class="number">1</span>) y -= x[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt[i] == <span class="number">2</span>) y += x[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt[i] == <span class="number">3</span>) y /= x[i];</span><br><span class="line">            <span class="keyword">else</span> y *= x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-小a与”204”"><a href="#B-小a与”204”" class="headerlink" title="B.小a与”204”"></a>B.小a与”204”</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h4><blockquote>
<p>小a非常喜欢204这个数字，因为′a′+′k′=204。现在他有一个长度为n的序列，其中只含有2,0,4这三种数字。设<script type="math/tex">a_i</script> 为序列中第i个数，你需要重新排列这个数列，使得 <script type="math/tex">\sum_{i = 1}^n (a_i − a_{i − 1})^2</script> 最大(公式的含义是：每个数与前一个数差的平方的和)。<br>注意：我们默认 $ a_0 = 0 $。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行一个整数n，接下来一行n个整数，第i个数表示 $a_i $</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个整数，表示 <script type="math/tex">\sum_{i = 1}^n (a_i − a_{i − 1})^2</script> 的最大值。</p>
</blockquote>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2 4</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">2 0 4</span><br></pre></td></tr></table></figure>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line"></span><br><span class="line">36</span><br></pre></td></tr></table></figure>
<h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><blockquote>
<p>样例1解释：按 $ (4,2) $ 排列是最优的，此时 $ sum = (4 - 0)^2 + (2 - 4)^2 = 20 $.<br>样例2解释：按 $ (4,0,2) $ 排列是最优的，<br>此时 $ sum = (4 - 0)^2 + (0 - 4)^2 + (2 - 0)^2 = 36 $.</p>
</blockquote>
<h4 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n \leq 10^5 $ ，保证 $ a_i $ 为 $ 2/0/4 $ 中的数。</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>用一个变量per标记序列中当前数位的上一位数字，然后直接贪心模拟！</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, cnt0, cnt2, cnt4, per, a[maxn]; LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123; <span class="comment">//贪心</span></span><br><span class="line">        a[<span class="number">0</span>] = cnt0 = cnt2 = cnt4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i] == <span class="number">2</span>) cnt2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="number">4</span>) cnt4++;</span><br><span class="line">            <span class="keyword">else</span> cnt0++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一个先选4，否则先选2，否则只能选0</span></span><br><span class="line">        <span class="keyword">if</span>(cnt4) ans = <span class="number">16L</span>L, cnt4--, per = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt2) ans = <span class="number">4L</span>L, cnt2--, per = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> ans = <span class="number">0L</span>L, cnt0--, per = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(per == <span class="number">4</span>)&#123; <span class="comment">//如果上一个数是4</span></span><br><span class="line">                <span class="keyword">if</span>(cnt0) ans += <span class="number">16L</span>L, cnt0--, per = <span class="number">0</span>; <span class="comment">//0先与之匹配</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cnt2) ans += <span class="number">4L</span>L, cnt2--, per = <span class="number">2</span>; <span class="comment">//否则2与之匹配</span></span><br><span class="line">                <span class="keyword">else</span> cnt4--, per = <span class="number">0</span>; <span class="comment">//否则只能选4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(per == <span class="number">2</span>)&#123; <span class="comment">//如果上一个数字是2</span></span><br><span class="line">                <span class="keyword">if</span>(cnt0 || cnt4)&#123; <span class="comment">//可以选0或4与之匹配</span></span><br><span class="line">                    <span class="keyword">if</span>(cnt0 &gt; cnt4) ans += <span class="number">4L</span>L, cnt0--, per = <span class="number">0</span>; <span class="comment">//如果0剩下的个数大于4剩下的个数，先选0</span></span><br><span class="line">                    <span class="keyword">else</span> ans += <span class="number">4L</span>L, cnt4--, per = <span class="number">4</span>; <span class="comment">//否则就选4与之匹配</span></span><br><span class="line">                &#125;<span class="keyword">else</span> cnt2--; <span class="comment">//否则只能选2</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">//如果上一个数字是0</span></span><br><span class="line">                <span class="keyword">if</span>(cnt4) ans += <span class="number">16L</span>L, cnt4--, per = <span class="number">4</span>; <span class="comment">//4先与之匹配</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cnt2) ans+=<span class="number">4</span>, cnt2--, per = <span class="number">2</span>; <span class="comment">//否则2与之匹配</span></span><br><span class="line">                <span class="keyword">else</span> cnt0--, per = <span class="number">0</span>; <span class="comment">//否则只能选0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-小a与星际探索"><a href="#C-小a与星际探索" class="headerlink" title="C.小a与星际探索"></a>C.小a与星际探索</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>小a正在玩一款星际探索游戏，小a需要驾驶着飞船从1号星球出发前往n号星球。其中每个星球有一个能量指数p。星球i能到达星球j当且仅当 $ p_i &gt; p_j $ 。<br>同时小a的飞船还有一个耐久度t，初始时为1号点的能量指数，若小a前往星球j，那么飞船的耐久度会变为 $ t \bigoplus p_j $(即t异或 $ p_j $，关于其定义请自行百度)<br>小a想知道到达n号星球时耐久度最大为多少？<br>注意：对于每个位置来说，从它出发可以到达的位置仅与两者的p有关，与下标无关。</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行一个整数n，表示星球数。接下来一行有n个整数，第i个整数表示 $ p_i $.</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个整数表示到达n号星球时最大的耐久度<br>若不能到达n号星球或到达时的最大耐久度为0则输出−1。</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">457 456 23</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">2 4 4 2</span><br><span class="line"></span><br><span class="line">5</span><br><span class="line">234 233 123 2333 23</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">478</span><br><span class="line"></span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">253</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>小a有两种方法到达3号星球<br>第一种：1→2→3，最终耐久度为 $ 457 \bigoplus 456 \bigoplus 23 = 22 $；<br>第二种：1→3，最终耐久度为 $ 457 \bigoplus 23 = 478 $。</p>
</blockquote>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n,\forall p_i \leq 3000 $.</p>
</blockquote>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>典型的01背包问题！定义：$ dp[i][1] $为经过第i个星球的最大耐久度，$ dp[i][0] $ 为不经过第i个星球的最大耐久度。初始值：$ dp[0][1] = $ first $ \bigoplus $ last。状态转移方程就是选与不选的问题，最后取最大即可。</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, t, last, cnt, vec[maxn], ans, first; <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vec,<span class="number">0</span>,<span class="keyword">sizeof</span>(vec));</span><br><span class="line">        last = <span class="number">-1</span>; cnt = <span class="number">0</span>; st.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p); <span class="comment">//p∈[1,3000]</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) first = p; <span class="comment">//标记第1个星球的能量指数</span></span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; first &lt;= p) <span class="keyword">continue</span>; <span class="comment">//超过第一个星球的能量指数都不能取</span></span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; i != n) st.insert(p); <span class="comment">//去重</span></span><br><span class="line">            <span class="keyword">if</span>(i == n) last = p; <span class="comment">//标记第n个星球的能量指数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(last == <span class="number">-1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">continue</span>;&#125; <span class="comment">//如果last不变，说明不小于first，直接输出-1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); ++it)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*it &lt;= last)<span class="keyword">continue</span>; <span class="comment">//小于第n个星球的能量指数都不能要</span></span><br><span class="line">            vec[cnt++] = *it;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = first^last; <span class="comment">//表示直接从1到n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j)&#123;</span><br><span class="line">            dp[j][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">1</span>]^vec[j<span class="number">-1</span>]; <span class="comment">//表示经过当前星球</span></span><br><span class="line">            dp[j][<span class="number">1</span>] = <span class="built_in">max</span>(dp[j][<span class="number">1</span>], <span class="built_in">max</span>(dp[j<span class="number">-1</span>][<span class="number">1</span>]^dp[j][<span class="number">1</span>], dp[j<span class="number">-1</span>][<span class="number">0</span>]^dp[j][<span class="number">1</span>]));</span><br><span class="line">            dp[j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[j<span class="number">-1</span>][<span class="number">0</span>], dp[j<span class="number">-1</span>][<span class="number">1</span>]); <span class="comment">//如果当前不选，则不选值为上一个状态选和不选的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(dp[cnt][<span class="number">0</span>], dp[cnt][<span class="number">1</span>]); <span class="comment">//取最大</span></span><br><span class="line">        <span class="keyword">if</span>(!ans) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-小a与黄金街道"><a href="#D-小a与黄金街道" class="headerlink" title="D.小a与黄金街道"></a>D.小a与黄金街道</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小a和小b来到了一条布满了黄金的街道上。它们想要带几块黄金回去，然而这里的城管担心他们拿走的太多，于是要求小a和小b通过做一个游戏来决定最后得到的黄金的数量。游戏规则是这样的：<br>假设道路长度为n米(左端点为0，右端点为n)，同时给出一个数k(下面会提到k的用法)设小a初始时的黄金数量为A，小b初始时的黄金数量为B，小a从1出发走向n−1，小b从n−1出发走向1，两人的速度均为 $ 1 m / s $。假设某一时刻(必须为整数)小a的位置为x，小b的位置为y，若 $ gcd(n, x) = 1 $ 且 $ gcd(n, y) = 1 $ ，那么小a的黄金数量A会变为 $ A * k^x(kg) $ ，小b的黄金数量B会变为 $ B ∗ k^y(kg) $，当小a到达n−1时游戏结束。小a想知道在游戏结束时 $ A + B $ 的值。答案对 $ 10^9 + 7 $ 取模。</p>
</blockquote>
<h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>一行四个整数 $ n,k,A,B $。</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个整数表示答案</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入:"></a>输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 2 1 1</span><br><span class="line"></span><br><span class="line">5 1 1 1</span><br></pre></td></tr></table></figure>
<h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">32</span><br><span class="line"></span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>保证 $ 3 \leq n \leq 10^{18}, 1 \leq A, B, k \leq 10^{13} $.</p>
</blockquote>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>通过前面对欧拉函数的整理，很容易得出本题的答案：<script type="math/tex">(A + B) * k^{\frac{n*\varphi(n)}{2}} \; mod \; p</script>。因为底数k与 $(10^9+7)$ 可以不互质，也可以互质，所以要用扩展欧拉定理来求解。虽然此题答案的指数不大，在 $ long \; long $ 范围内，但只要满足指数 $ b &gt; \varphi(p) $，那么就可以用扩展欧拉定理对指数进行降幂，然后套用整数快速幂求解即可。<br>扩展欧拉定理公式：</p>
<script type="math/tex; mode=display">
a^b\equiv
\begin{cases}
&a^{b\%\varphi(p)} &\gcd(a,p)=1\\
&a^b &\gcd(a,p)\neq1,b\leq\varphi(p)\\
&a^{b\%\varphi(p)+\varphi(p)} &\gcd(a,p)\neq1,b>\varphi(p)
\end{cases}\pmod p</script><p>实际上可以合并成这两条公式：</p>
<script type="math/tex; mode=display">
a^b\equiv
\begin{cases}
&a^b & b\leq\varphi(p)\\
&a^{b\%\varphi(p)+\varphi(p)} & b>\varphi(p)
\end{cases}\pmod p</script></blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL n, k, A, B;</span><br><span class="line"><span class="function">LL <span class="title">get_Euler</span><span class="params">(LL x)</span></span>&#123; <span class="comment">//快速求欧拉函数</span></span><br><span class="line">    LL res = x;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2L</span>L; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b)</span> </span>&#123; <span class="comment">//快速幂</span></span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; A &gt;&gt; B)&#123;</span><br><span class="line">        LL b = n * get_Euler(n) / <span class="number">2</span>;</span><br><span class="line">        LL phi = mod - <span class="number">1L</span>L; <span class="comment">//模数的欧拉函数值phi</span></span><br><span class="line">        if(b &gt; phi) cout &lt;&lt; (A + B) % mod * quick_mod(k, b % phi + phi) % mod &lt;&lt; endl; //扩展欧拉定理：适用于指数b&gt;模数的欧拉函数值phi，底数k与p既可互质也可不互质</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (A + B) % mod * quick_mod(k, b) % mod &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//若b≤phi，则直接用整数快速幂求解</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-小a的轰炸游戏"><a href="#E-小a的轰炸游戏" class="headerlink" title="E.小a的轰炸游戏"></a>E.小a的轰炸游戏</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小a正在玩一款即时战略游戏，现在他要用航空母舰对敌方阵地进行轰炸<br>地方阵地可以看做是 $n \times m $的矩形<br>航空母舰总共会派出q架飞机。<br>飞机有两种，第一种飞机会轰炸以 $(x_i,y_i)$ 为中心，对角线长为 $ l_i $ 的正菱形(也就是两条对角线分别于x轴，y轴平行的正方形)，而第二种飞机只会轰炸正菱形的上半部分(包括第 $ x_i $ 行)(具体看样例解释)<br>现在小a想知道所有格子被轰炸次数的异或和<br>注意：不保证被轰炸的格子一定在矩形范围内，若越界请忽略</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行三个整数 $ n,m,q$，分别表示矩阵的长/宽/询问次数，接下来q行，每行四个整数 $opt,x,y,l$，表示飞机类型，轰炸的坐标，以及对角线长度<br>保证l为奇数！</p>
</blockquote>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个整数，表示所有格子被轰炸次数的异或和</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5 4</span><br><span class="line">1 2 2 1</span><br><span class="line">1 3 3 5</span><br><span class="line">1 3 2 3</span><br><span class="line">2 2 4 3</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每次的操作矩阵即操作后的矩阵的值如下</span><br><span class="line"></span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line"></span><br><span class="line">0 0 1 0 0</span><br><span class="line">0 2 1 1 0</span><br><span class="line">1 1 1 1 1</span><br><span class="line">0 1 1 1 0</span><br><span class="line"></span><br><span class="line">0 0 1 0 0</span><br><span class="line">0 3 1 1 0</span><br><span class="line">2 2 2 1 1</span><br><span class="line">0 2 1 1 0</span><br><span class="line"></span><br><span class="line">0 0 1 1 0</span><br><span class="line">0 3 2 2 1</span><br><span class="line">2 2 2 1 1</span><br><span class="line">0 2 1 1 0</span><br><span class="line">最后把所有元素异或后为2</span><br></pre></td></tr></table></figure>
<h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n,m \leq 1000 $<br> $ 1 \leq q \leq 5 * 10^5 $<br>保证 $ opt=\frac{1}{2},1 \leq x,y,l \leq max(N,M) $<br>读入文件过大，请使用较快的读入方式</p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>get新技能，开3倍空间，四个方向斜着都差分一下！</p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3050</span>; <span class="comment">//3倍</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> add = <span class="number">1000</span>;  <span class="comment">//偏移量</span></span><br><span class="line"><span class="keyword">int</span> n, m, q, opt, x, y, l, ans, tmp, a[maxn][maxn], b[maxn][maxn], c[maxn][maxn], d[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>)f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    a[x - l / <span class="number">2</span>][y]++, a[x + <span class="number">1</span>][y - l / <span class="number">2</span> - <span class="number">1</span>]--; <span class="comment">//左斜上</span></span><br><span class="line">    b[x - l / <span class="number">2</span>][y + <span class="number">1</span>]--,b[x + <span class="number">1</span>][y + l / <span class="number">2</span> + <span class="number">2</span>]++; <span class="comment">//右斜下</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    c[x + <span class="number">1</span>][y - l / <span class="number">2</span> + <span class="number">1</span>]++, c[x + l / <span class="number">2</span> + <span class="number">1</span>][y + <span class="number">1</span>]--; <span class="comment">//左斜下</span></span><br><span class="line">    d[x + <span class="number">1</span>][y + l / <span class="number">2</span>]--, d[x + l / <span class="number">2</span> + <span class="number">1</span>][y]++; <span class="comment">//右斜上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        opt = <span class="built_in">read</span>(); x = <span class="built_in">read</span>(); y = <span class="built_in">read</span>(); l = <span class="built_in">read</span>();</span><br><span class="line">        x += add, y += add;</span><br><span class="line">        up(x, y, l);</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>) down(x, y, l);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">2</span> * add; ++i) &#123; <span class="comment">//一定要到多出2倍，这样才能复原原矩阵中的每个值</span></span><br><span class="line">        tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m + <span class="number">2</span> * add; ++j) &#123;</span><br><span class="line">            tmp += a[i][j] + b[i][j] + c[i][j] + d[i][j];</span><br><span class="line">            <span class="keyword">if</span>(i &gt; add &amp;&amp; i &lt;= n + add &amp;&amp; j &gt; add &amp;&amp; j &lt;= m + add) ans ^= tmp; <span class="comment">//原图所在位置：正中心</span></span><br><span class="line">            a[i + <span class="number">1</span>][j - <span class="number">1</span>] += a[i][j]; <span class="comment">//左斜上</span></span><br><span class="line">            b[i + <span class="number">1</span>][j + <span class="number">1</span>] += b[i][j]; <span class="comment">//右斜下</span></span><br><span class="line">            c[i + <span class="number">1</span>][j + <span class="number">1</span>] += c[i][j]; <span class="comment">//左斜下</span></span><br><span class="line">            d[i + <span class="number">1</span>][j - <span class="number">1</span>] += d[i][j]; <span class="comment">//右斜上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-小a的排列"><a href="#G-小a的排列" class="headerlink" title="G.小a的排列"></a>G.小a的排列</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小a有一个长度为n的排列。定义一段区间是”萌”的，当且仅当把区间中各个数排序后相邻元素的差为1现在他想知道包含数x,y的长度最小的”萌”区间的左右端点也就是说，我们需要找到长度最小的区间 $ [l,r] $，满足区间 $ [l,r] $ 是”萌”的，且同时包含数x和数y，如果有多个合法的区间，输出左端点最靠左的方案。</p>
</blockquote>
<h4 id="输入描述：-1"><a href="#输入描述：-1" class="headerlink" title="输入描述："></a>输入描述：</h4><blockquote>
<p>第一行三个整数 $ N,x,y $，分别表示序列长度，询问的两个数；第二行有n个整数表示序列内的元素，保证输入为一个排列。</p>
</blockquote>
<h4 id="输入：-1"><a href="#输入：-1" class="headerlink" title="输入："></a>输入：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 2 3</span><br><span class="line">5 2 1 3 4</span><br><span class="line"></span><br><span class="line">8 3 5</span><br><span class="line">6 7 1 8 5 2 4 3</span><br></pre></td></tr></table></figure>
<h4 id="输出：-2"><a href="#输出：-2" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 4</span><br><span class="line"></span><br><span class="line">5 8</span><br></pre></td></tr></table></figure>
<h4 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h4><blockquote>
<p>样例1：区间 $[2, 4] = {2,1,3} $包含了2,3且为“萌”区间，可以证明没有比这更优的方案。</p>
</blockquote>
<h4 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>保证 $ 2 \leq n \leq 10^5, 1 \leq x, y \leq n$。</p>
</blockquote>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>由于输入的是一个 $ 1 - n $ 的排列，所以用一个数组标记每个数字出现的位置。因为要找的最小萌区间包含 $ x, y $ 这两个数字，所以 $ x, y $ 所在区间一定满足一个排列的条件即重排后为等差数列，公差为1，判断条件为 $ maxm - minn == ed - st $。于是通过枚举当前包含 $ x, y $ 这两个数字所在的排列中还有哪些数字没有出现，而这些数字本该被包含，这样循环更新就逐渐得到所在排列在原序列中的左右端点值，暴力即可。</p>
</blockquote>
<h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, x, y, st, ed, minn, maxm, a[maxn], pos[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], pos[a[i]] = i; <span class="comment">//标记每个数字的出现的序号</span></span><br><span class="line">        st = <span class="built_in">min</span>(pos[x], pos[y]), ed = <span class="built_in">max</span>(pos[x], pos[y]);</span><br><span class="line">        minn = inf, maxm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = st; i &lt;= ed; ++i) minn = <span class="built_in">min</span>(minn, a[i]), maxm = <span class="built_in">max</span>(maxm, a[i]); <span class="comment">//当前区间中取最大和最小</span></span><br><span class="line">            <span class="keyword">if</span>(maxm - minn == ed - st) <span class="keyword">break</span>; <span class="comment">//如果该区间为一个排列，则退出</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = minn; i &lt;= maxm; ++i) st = <span class="built_in">min</span>(st, pos[i]), ed = <span class="built_in">max</span>(ed, pos[i]); <span class="comment">//更新排列中未出现的数字所在位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; st &lt;&lt; <span class="string">' '</span> &lt;&lt; ed &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营6</title>
    <url>/posts/30b4a593.html</url>
    <content><![CDATA[<h3 id="A-出题"><a href="#A-出题" class="headerlink" title="A.出题"></a>A.出题</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小B准备出模拟赛。<br>她把题目按难度分为四等，分值分别为6,7,8,9。<br>已知小B共出了m道题，共n分。<br>求小B最少出了多少道6分题。    </p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>两个正整数n,m</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个数，表示答案。<br>若无解，输出”jgzjgzjgz”。</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">34 5</span><br><span class="line"></span><br><span class="line">32 5</span><br><span class="line"></span><br><span class="line">5 1</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">jgzjgzjgz</span><br></pre></td></tr></table></figure>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ n,m \leq 10^{12} $</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>简单数学！这题比赛时居然没做出来qwq，就差在草稿纸上写一下不等式……显然有解的充要条件是 $ 6m \leq n \leq 9m $。若有解：设有 $ x \; (0 \leq x \leq m) $ 道6分题，则剩下的 $ m-x $ 题共 $ n-6x $ 分，其有解的充要条件为 $ 7(m-x) \leq n-6x \leq 9(m-x) $，解得 $ 7m-n \leq x \leq \frac{9m-n}{3} $，即答案为 $ max(0, 7m-n) $。（像这类求最少的问题可以根据题目条件列出不等式找答案qwq）</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">6L</span>L * m &gt; n || n &gt; <span class="number">9L</span>L * m ) <span class="built_in">puts</span>(<span class="string">"jgzjgzjgz"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span>(<span class="number">0L</span>L, <span class="number">7L</span>L * m - n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-煤气灶"><a href="#B-煤气灶" class="headerlink" title="B.煤气灶"></a>B.煤气灶</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小j开始打工，准备赚钱买煤气灶。<br>第一天，小j的工资为n元，之后每天他的工资都比前一天多d元。<br>已知煤气灶需要m元，求小j最少工作几天才能买到煤气灶。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>四个整数 $ n,m,d,x $ 分别表示小j第一天的工资，煤气灶的价格，工资每天的增长量，答案不超过x</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个数表示答案</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 100 20 100</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>10+30+50+70&gt;=100</p>
</blockquote>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 0 \leq n,d \leq 10^9,n+d&gt;0 $<br>$ 1 \leq m \leq 10^{18} $<br>$ 1 \leq x \leq 10^9 $</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>简单的等差数列求和！因为数据太大，所以既不能暴力也不能直接用求根公式解未知数x。正解：二分答案！做这道题早就想到要二分了，但交了2发WA之后发现爆long long，于是简单地写了个python再交一发就过了。赛后看了一下题解，get新技能：用除法代替乘法避免爆long long。假设小j工作了k天，则总工资 $ = n \times  k + d \times \frac{k(k-1)}{2} \ge m $，移项整理得：$ d \times k(k-1) \ge 2(m-n \times  k) $。因为 $ a \times b \ge c \Leftrightarrow  a \ge \left \lceil \frac{c}{b} \right \rceil $，其中 $ \left \lceil x \right \rceil $ 表示将x上取整，所以判别式分两种情况：①若 $ d = 0 $，则不等式变为 $ n \times k \ge m $；②若 $ d \neq 0 $，则不等式变为 $ k(k-1) \ge \left \lceil \frac{2(m-n \times  k)}{d} \right \rceil = \frac{2(m-n \times  k) +(d -1)}{d} $，以此为条件进行二分，这样就避免了不等式左边爆long long的情况。求解一元二次方程常用二分解法！</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">1e9</span>;</span><br><span class="line">LL n, m, d, x, lt, rt, mid, ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!d) <span class="keyword">return</span> n * k &gt;= m;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> k * (k - <span class="number">1L</span>L) &gt;= (<span class="number">2L</span>L * (m - n * k) + d - <span class="number">1L</span>L) / d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; d &gt;&gt; x) &#123;</span><br><span class="line">        lt = <span class="number">1L</span>L, rt = inf, ans = x; <span class="comment">//若没有进行二分判断，那么ans为给定的x</span></span><br><span class="line">        <span class="keyword">while</span>(lt &lt;= rt) &#123;</span><br><span class="line">            mid = (lt + rt) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) ans = mid, rt = mid - <span class="number">1L</span>L; <span class="comment">//若满足条件，则找更少的天数，即右区间左移</span></span><br><span class="line">            <span class="keyword">else</span> lt = mid + <span class="number">1L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-项链"><a href="#C-项链" class="headerlink" title="C.项链"></a>C.项链</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小B想给她的新项链染色。<br>现在有m种颜色，对于第i种颜色，小B有a_i单位的颜料，每单位颜料可以染项链的一个珠子；同时，小B对于第i种颜色的喜爱度为b_i。<br>已知项链有n个珠子，求染色后每个珠子的颜色的喜爱度之和的最大值。<br>(每个珠子只能至多被染一次，不被染色则喜爱度为0)    </p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个数n,m<br>第二行m个数 $ a_i $<br>第三行m个数 $ b_i $</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个数表示答案</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">1 2 3</span><br><span class="line">3 2 1</span><br><span class="line"></span><br><span class="line">5 3</span><br><span class="line">1 2 1</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line"></span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h4 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n,m \leq 10^5, 0 \leq a_i,b_i \leq 10^6 $</p>
</blockquote>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>按喜爱度降序排，依次贪心即可。</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>LL a, b;&#125; nod[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m; LL ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node xx, node yy)</span> </span>&#123;<span class="keyword">return</span> xx.b &gt; yy.b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        ans = <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">cin</span> &gt;&gt; nod[i].a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">cin</span> &gt;&gt; nod[i].b;</span><br><span class="line">        sort(nod, nod + m, cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n - nod[i].a &gt;= <span class="number">0</span>) ans += nod[i].a * nod[i].b, n -= nod[i].a;</span><br><span class="line">            <span class="keyword">else</span> &#123;ans += nod[i].b * n; <span class="keyword">break</span>;&#125; <span class="comment">//注意：剩下的珠子计算完之后直接break掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-美食"><a href="#D-美食" class="headerlink" title="D.美食"></a>D.美食</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小B喜欢美食。现在有n个美食排成一排摆在小B的面前，依次编号为 $ 1 \cdots n $，编号为i的食物大小为 $ a[i] $，即足够小B吃 $ a[i] $ 口。<br>小B每次会吃两口，这两口要么是编号相同的美食，要么是编号之差的绝对值为1的美食。小B想知道，她最多能吃几次？</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第1行一个正整数n，表示美食个数<br>接下来n行，第i行一个整数 $ a[i] $，表示编号为i的美食的大小</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个数表示小B最多吃几次。</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>用二元组(a,b)表示某一次吃的两个美食分别为第a个美食和第b个美食，则下面为一个吃10次的方案：$ (1,2)(2,2)(2,2)(3,4)(3,4)(3,4)(3,4)(3,4)(3,4)(3,4) $<br>注意不一定要吃完。</p>
</blockquote>
<h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n \leq 10^5, 0 \leq a[i] \leq 10^9 $</p>
</blockquote>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>简单贪心！模拟一下样例即可得出策略。</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">LL n, a[maxn], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        ans = <span class="number">0L</span>L;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; a[i + <span class="number">1</span>] &gt; <span class="number">0L</span>L) ans++, a[i + <span class="number">1</span>]--;</span><br><span class="line">            ans += a[i] / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-海啸"><a href="#E-海啸" class="headerlink" title="E.海啸"></a>E.海啸</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>有一个沿海地区，可以看作有n行m列的城市，第i行第j列的城市海拔为 $ h[i][j] $。<br>由于沿海，所以这个地区经常会发生海啸。海啸发生时，部分城市会被淹没，具体来说，海水高度会达到d，因此海拔低于d的城市都会被淹没。现在有q次询问，每次问你一个矩形区域中，有多少城市不会被淹没。</p>
</blockquote>
<h4 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行三个整数n,m,d，具体含义见题目描述。<br>接下来n行，每行m个整数，其中第i行第j列的整数为 $ h[i][j] $，具体含义见题目描述。<br>第n+2行一个整数q，表示询问数。<br>接下来q行，每行四个整数a,b,x,y，<br>表示询问从第a行第b列到第x行第y列的矩形地区中，有多少地区不会被淹没。<br>即有多少个i,j，满足 $ a \leq i \leq x,b \leq j \leq y $，且 $ h[i][j] \ge d $ 。</p>
</blockquote>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>共q行，第i行一个整数，表示第i个询问的答案。</p>
</blockquote>
<h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 3</span><br><span class="line">1 2 3</span><br><span class="line">2 1 5</span><br><span class="line">4 3 2</span><br><span class="line">2</span><br><span class="line">1 2 2 3</span><br><span class="line">2 1 3 3</span><br></pre></td></tr></table></figure>
<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n×m \leq 10^6 $<br>$ 1 \leq q \leq 10^5 $<br>$ 0 \leq d,h[i][j] \leq 10^9 $<br>$ 1 \leq a \leq x \leq n, 1 \leq b \leq y \leq m $ </p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>二维树状数组求前缀和！注意：vector容器的大小要么一开始申请好，要么push_back往容器加元素，但后者大小取决于压入元素的个数。</p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[maxn], num[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, d, a, b, x, y, q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j &lt;= m; j += j &amp; -j)</span><br><span class="line">            num[i][j] += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j &gt; <span class="number">0</span>; j -= j &amp; -j)</span><br><span class="line">            ans += num[i][j];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) vec[i].<span class="built_in">clear</span>(), num[i].<span class="built_in">clear</span>(); <span class="comment">//先清理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) vec[i].resize(m + <span class="number">5</span>), num[i].resize(m + <span class="number">5</span>); <span class="comment">//再申请二维空间</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                vec[i][j] = <span class="built_in">read</span>();</span><br><span class="line">                <span class="keyword">if</span>(vec[i][j] &gt;= d) add(i, j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>(), x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(x, y) - query(a - <span class="number">1</span>, y) - query(x, b - <span class="number">1</span>) + query(a - <span class="number">1</span>, b - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="F-石头剪刀布"><a href="#F-石头剪刀布" class="headerlink" title="F.石头剪刀布"></a>F.石头剪刀布</h3><h4 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>wzms 今年举办了一场剪刀石头布大赛，bleaves 被选为负责人。<br>比赛共有 $ 2^n $ 个人参加，分为n轮，在每轮中，第 1 位选手和第 2 位选手对战，胜者作为新的第 1 位选手，<br>第 3 位和第 4 位对战，胜者作为新的第 2 位选手，以此类推。<br>bleaves 调查得知，每个人都有其偏爱决策，每个人在每一次对战中都会使用他的偏爱决策。如果一次对战的双方的偏爱决策相同，那么这次对战就永远不会结束，所以 bleaves 不希望这种情况发生。<br>现在 bleaves 知道了每个人的偏爱决策，但她不知道如何安排初始的次序，使得上面的情况不会发生，你能帮帮她吗？</p>
</blockquote>
<h4 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>一行三个整数 R,P,S ，表示偏爱石头，布，剪刀的人数分别为 R,P,S 。</p>
</blockquote>
<h4 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果无解，输出 <code>IMPOSSIBLE</code> ；<br>否则输出一个长度为 $ R+P+S $ 的字符串，第i个字符表示初始时第i位选手的偏爱决策，如果有多种方案，输出字典序最小的。</p>
</blockquote>
<h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1 0</span><br><span class="line"></span><br><span class="line">2 0 0</span><br><span class="line"></span><br><span class="line">1 1 2</span><br></pre></td></tr></table></figure>
<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PR</span><br><span class="line"></span><br><span class="line">IMPOSSIBLE</span><br><span class="line"></span><br><span class="line">PSRS</span><br></pre></td></tr></table></figure>
<h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>只有 2 个选手，一个偏爱石头，一个偏爱布，无论次序如何，偏爱布的选手都会胜出。<br>所以方案可以是 PR 和 RP ，其中字典序最小的 PR 。</p>
</blockquote>
<h4 id="备注-3"><a href="#备注-3" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>全部的输入数据满足：$ R+P+S=2^n, 1 \leq n \leq 20 $。</p>
</blockquote>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>这道题应该是整场较难的了，若能想到下面这位大佬的解法（个人觉得非常好理解），那就简单多了，很感谢某位已AK的大佬赛后提供的精彩题解，Orz！根据大佬的思路，重新整理了一下想法：根据获胜者的偏爱决策可以推出对战的两人的偏爱决策，所以这题要先从结局来反推初始状态的3个已知量是否有解。若有解，只需根据偏爱决策来递归处理字典序即可。<br>先规定一下：0代表石头，1代表布，2代表剪刀。<br>若最后一场获胜者为1（布），根据偏爱决策可得最后一局的组合为（1，0），倒数第二局的组合为（1，0）和（0，2），倒数第三局的组合为（1，0）……<br>从结局枚举到之前的状态可知<code>若一轮比赛结束时的状态确定了，则这轮比赛刚开始时的状态也一定是确定的</code>。<br>举个栗子：假设一轮比赛结束后，剩下x个0，y个1，z个2，那么这轮比赛开始时，一定有这样的组合：x局（0，2），y局（1，0），z局（2，1）。<br>设一轮比赛开始时有A个0，B个1，C个2，则有 $ A = x + y, B = y + z, C = x + z $，<br>解得 $ x=\frac{A+C-B}{2}, y=\frac{A+B-C}{2}, z=\frac{B+C-A}{2} $。<br>于是，我们就找到了递归（终止）条件：根据题目已给的A,B,C，递归求解下一场的状态，若最终能化成0,0,1的状态，则说明存在一种策略，否则不存在。<br>接下来就更简单了，通过前面已推得最终的获胜者，那么就可以反推出之前所有的比赛情况，所以只需先递归下来求出结果，然后每次回溯时都判断一下输出最小字典序即可。</p>
</blockquote>
<h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> stone, cloth, scissors, winner; <span class="comment">//石头、布，剪刀，赢家</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> _stone, <span class="keyword">int</span> _cloth, <span class="keyword">int</span> _scissors)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_stone &lt; <span class="number">0</span> || _cloth &lt; <span class="number">0</span> || _scissors &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(_stone == <span class="number">0</span> &amp;&amp; _cloth == <span class="number">0</span> &amp;&amp; _scissors == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(_stone == <span class="number">1</span> &amp;&amp; _cloth == <span class="number">0</span> &amp;&amp; _scissors == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//石头赢</span></span><br><span class="line">    <span class="keyword">if</span>(_stone == <span class="number">0</span> &amp;&amp; _cloth == <span class="number">1</span> &amp;&amp; _scissors == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//布赢</span></span><br><span class="line">    <span class="keyword">if</span>(_stone == <span class="number">0</span> &amp;&amp; _cloth == <span class="number">0</span> &amp;&amp; _scissors == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">//剪刀赢</span></span><br><span class="line">    <span class="keyword">return</span> check((_stone + _scissors - _cloth) &gt;&gt; <span class="number">1</span>, (_stone + _cloth - _scissors) &gt;&gt; <span class="number">1</span>, (_cloth + _scissors - _stone) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> _winner, <span class="keyword">int</span> _stat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_stat == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(_winner == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"RS"</span>; <span class="comment">//石头赢</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(_winner == <span class="number">1</span>) <span class="keyword">return</span> <span class="string">"PR"</span>; <span class="comment">//布赢</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"PS"</span>; <span class="comment">//剪刀赢</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_winner == <span class="number">0</span>) &#123; <span class="comment">//石头</span></span><br><span class="line">        <span class="built_in">string</span> s1 = get_ans(<span class="number">0</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> s2 = get_ans(<span class="number">2</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(s1 &lt; s2) <span class="keyword">return</span> s1 + s2; <span class="comment">//字典序最小</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s2 + s1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_winner == <span class="number">1</span>) &#123; <span class="comment">//布</span></span><br><span class="line">        <span class="built_in">string</span> s1 = get_ans(<span class="number">1</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> s2 = get_ans(<span class="number">0</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(s1 &lt; s2) <span class="keyword">return</span> s1 + s2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s2 + s1;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; <span class="comment">//剪刀</span></span><br><span class="line">        <span class="built_in">string</span> s1 = get_ans(<span class="number">2</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> s2 = get_ans(<span class="number">1</span>, _stat &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(s1 &lt; s2) <span class="keyword">return</span> s1 + s2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s2 + s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; stone &gt;&gt; cloth &gt;&gt; scissors) &#123;</span><br><span class="line">        winner = check(stone, cloth, scissors);</span><br><span class="line">        <span class="keyword">if</span>(winner == <span class="number">-1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>); <span class="keyword">continue</span>;&#125; <span class="comment">//无解</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; get_ans(winner, (stone + cloth + scissors) &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-区间或和"><a href="#G-区间或和" class="headerlink" title="G.区间或和"></a>G.区间或和</h3><h4 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>求 $ a|(a+1)|(a+2)| \cdots |(b-1)|b $ 。<br>其中|表示 [按位或]。</p>
</blockquote>
<h4 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>多组输入，每行两个数表示a和b</p>
</blockquote>
<h4 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每组输入，输出一个数 $ a|(a+1)|(a+2)| \cdots |(b-1)|b $。</p>
</blockquote>
<h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">99 109</span><br><span class="line">68 77</span><br><span class="line">55 66</span><br><span class="line">34 43</span><br><span class="line">1111234 1114321</span><br></pre></td></tr></table></figure>
<h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111</span><br><span class="line">79</span><br><span class="line">127</span><br><span class="line">47</span><br><span class="line">1179647</span><br></pre></td></tr></table></figure>
<h4 id="备注-4"><a href="#备注-4" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>输入不超过10000行，$ 0 \leq a,b \leq 10^{18}, a \leq b $</p>
</blockquote>
<h4 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>先标记区间左右端点值的二进制中1的位置，然后枚举63个二进制位，再标记一下区间左端点a加上每一位对应的十进制值是否不超过b，最后累加一下二进制中所有被标记为1的位对应的十进制数即可。</p>
</blockquote>
<h4 id="AC代码：-6"><a href="#AC代码：-6" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">65</span>;</span><br><span class="line">LL a, b, ans, <span class="built_in">bit</span>[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">bit</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">bit</span>)); ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0L</span>L; i &lt; <span class="number">63</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;i) &amp; a) <span class="built_in">bit</span>[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;i) &amp; b) <span class="built_in">bit</span>[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; <span class="number">63</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;i) + a &lt;= b) <span class="built_in">bit</span>[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; <span class="number">63</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">bit</span>[i]) ans += <span class="number">1L</span>L&lt;&lt;i;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H-肥猪"><a href="#H-肥猪" class="headerlink" title="H.肥猪"></a>H.肥猪</h3><h4 id="题目描述：-6"><a href="#题目描述：-6" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>小B来到了一个异世界，成为了肥猪之王。<br>在这个异世界，共有n种肥猪，编号分别为 $ 1,\cdots,n $。小B希望集齐这n种肥猪。<br>召集肥猪有两种方式：<br>1.花费 $ a[i] $ 的金币召唤一只编号为i的肥猪。<br>2.花费x的金币使所有已召集的肥猪进化。<br>即编号为i的肥猪编号变成i+1，特殊的，编号为n的肥猪编号变成1。请问小B最少要花多少金币才能集齐n种肥猪。</p>
</blockquote>
<h4 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个正整数n,x<br>接下来n行，第i行一个正整数 $ a[i] $</p>
</blockquote>
<h4 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一个数表示答案</p>
</blockquote>
<h4 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 10</span><br><span class="line">1</span><br><span class="line">20</span><br><span class="line"></span><br><span class="line">4 10</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h4 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line"></span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n \leq 2000, 1 \leq x, a[i] \leq 10^9 $.</p>
</blockquote>
<h4 id="思路：-7"><a href="#思路：-7" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>由题可知，小B最多使用n-1次进化技能。数组a表示不使用进化技能下每种猪的召集成本，数组b表示使用了j个进化技能后，每种猪对应的最小召集成本。解法：暴力枚举 $ 1 \sim n - 1 $ 次进化，求出其中（花费x或 $ a[i] $ 的金币）召集的最小代价即可！</p>
</blockquote>
<h4 id="AC代码：-7"><a href="#AC代码：-7" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line">LL n, x, ans, tmp, a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x) &#123;</span><br><span class="line">        ans = <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], ans += (b[i] = a[i]);</span><br><span class="line">        <span class="keyword">for</span>(LL j = <span class="number">1</span>; j &lt; n; ++j) &#123; <span class="comment">//至多使用n-1次技能</span></span><br><span class="line">            tmp = x * j;</span><br><span class="line">            <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; ++i) &#123;<span class="comment">//n种（要进化的）肥猪</span></span><br><span class="line">                <span class="keyword">if</span>(b[(i + j) % n] &gt; a[i]) tmp += (b[(i + j) % n] = a[i]); <span class="comment">//更新b数组第i种猪第j次进化后得到的最小召集成本</span></span><br><span class="line">                <span class="keyword">else</span> tmp += b[(i + j) % n];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-wzoi"><a href="#I-wzoi" class="headerlink" title="I.wzoi"></a>I.wzoi</h3><h4 id="题目描述：-7"><a href="#题目描述：-7" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>bleaves 最近在 wzoi 上面做题。<br>wzoi 的题目有两种，一种是 noip 题，一种是省选题。<br>bleaves 的做题方式很特别。每一天，她可能会看一道题目，这时她会选择题目种类，然后 wzoi 会在选定种类中随机扔给她一道她还没看过的题，她会把这道题看一遍，然后存在脑子里慢慢思考；她也有可能写题，这时她一定会写没写过的题中看的时间最迟的一题(如果不存在没写过的且没看过的题，她就不能写题)。<br>wzoi 每天会有一个推荐的题目种类，<br>如果 bleaves 看一道题目：如果种类和推荐的相同，那么这道题目最大得分为10，否则为5；如果 bleaves 写一道题目：如果种类和推荐的相同，那么这道题目得分为最大得分，否则为最大得分-5；<br>假如 bleaves 现在还没看过任何一题，并且她知道了 wzoi 接下来一些天每天推荐的种类，问她在这些天的最大得分。</p>
</blockquote>
<h4 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>一行一个01串 s ，|s| 表示天数，$ s_i=0 $ 表示 wzoi 第 i 天推荐 noip 题，$ s_i=1 $ 表示 wzoi 第 i 天推荐省选题。</p>
</blockquote>
<h4 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>一行一个整数最大得分。</p>
</blockquote>
<h4 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0011</span><br><span class="line"></span><br><span class="line">0101</span><br><span class="line"></span><br><span class="line">0110</span><br></pre></td></tr></table></figure>
<h4 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote>
<p>样例一：4天行动依次为：看一道 noip 题，写第1天看的题，看一道省选题，写第3天看的题。<br>样例二：4天行动依次为：看一道 noip 题，写第1天看的题，看一道noip题，写第3天看的题。<br>样例三：4天行动依次为：看一道 noip 题，看一道省选题，写第2天看的题，写第1天看的题。</p>
</blockquote>
<h4 id="备注-5"><a href="#备注-5" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>全部的输入数据满足：$ 1 \leq n \leq 10^6 $, n 为偶数。</p>
</blockquote>
<h4 id="思路：-8"><a href="#思路：-8" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>把看题视作左括号，做题视作右括号，那么问题就转化成简单的括号匹配问题（比赛时没来得及看QWQ）。如果能匹配，那么就能得10分，否则只能得5分，栈模拟即可！</p>
</blockquote>
<h4 id="AC代码：-8"><a href="#AC代码：-8" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="built_in">string</span> str; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty()) st.push(str[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.top() != str[i]) st.push(str[i]);</span><br><span class="line">            <span class="keyword">else</span> st.pop(), cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; st.<span class="built_in">size</span>() / <span class="number">2</span> * <span class="number">5</span> + cnt * <span class="number">10</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J-迷宫"><a href="#J-迷宫" class="headerlink" title="J.迷宫"></a>J.迷宫</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote>
<p>你在一个 n 行 m 列的网格迷宫中，迷宫的每一格要么为空，要么有一个障碍。<br>你当前在第 r 行第 c 列(保证该格子为空)。每次移动你可以向上下左右任意一个方向移动一格，前提是不能走到障碍上，也不能超出迷宫的边界。<br>你向左移动的次数不能超过 x 次，向右不能超过 y 次。<br>问在这种情况下，对于每个格子，是否存在一种移动方案让你走到它。<br>输出有多少个格子存在移动方案让你走到它。</p>
</blockquote>
<h4 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个正整数 n,m 。<br>第二行两个正整数 r,c ，保证 $ 1 \leq r \leq n,1 \leq c \leq m $。<br>第三行两个整数 x,y ，保证 $ 0 \leq x,y \leq 10^9 $ 。<br>接下来 n 行，每行一个长度为 m 的字符串，<br>第 i 行第 j 个字符表示迷宫第 i 行第 j 列的格子，<br>字符为<code>.</code> 表示格子为空，字符为<code>*</code> 表示格子上有一个障碍。</p>
</blockquote>
<h4 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个数，表示有多少个格子存在移动方案让你走到它。</p>
</blockquote>
<h4 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">.....</span><br><span class="line">.***.</span><br><span class="line">...**</span><br><span class="line">*....</span><br><span class="line"></span><br><span class="line">4 4</span><br><span class="line">2 2</span><br><span class="line">0 1</span><br><span class="line">....</span><br><span class="line">..*.</span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<h4 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br><span class="line">7</span><br></pre></td></tr></table></figure>
<h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">样例一：将能走到的格子用+标记：</span><br><span class="line">+++..</span><br><span class="line">+***.</span><br><span class="line">+++**</span><br><span class="line">*+++.</span><br><span class="line">样例二：</span><br><span class="line">.++.</span><br><span class="line">.+*.</span><br><span class="line">.++.</span><br><span class="line">.++.</span><br></pre></td></tr></table></figure>
<h4 id="备注-6"><a href="#备注-6" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>对于全部数据， $ 1 \leq n,m \leq 1000 $。</p>
</blockquote>
<h4 id="思路：-9"><a href="#思路：-9" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>简单的bfs。从起点 $ (r,c) $ 向左或向右移动后到达的每个坐标点都被赋予2个已有的左移和右移状态量，求满足那些左移状态量不超过x，右移状态量不超过y的坐标点个数。 </p>
</blockquote>
<h4 id="AC代码：-9"><a href="#AC代码：-9" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, r, c, x, y, ans, dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;, dist[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dx, dy, gay_l, gay_r;</span><br><span class="line">    node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _gay_l, <span class="keyword">int</span> _gay_r) : dx(_x), dy(_y), gay_l(_gay_l), gay_r(_gay_r) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> dxx, <span class="keyword">int</span> dyy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dxx &lt; <span class="number">0</span> || dyy &lt; <span class="number">0</span> || dxx &gt;= n || dyy &gt;= m ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _gay_l, <span class="keyword">int</span> _gay_r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</span><br><span class="line">    que.push(node(_x, _y, _gay_l, _gay_r));</span><br><span class="line">    dist[_x][_y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        node nod = que.front(); que.pop(), ans++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = nod.dx + dir[i][<span class="number">0</span>], ny = nod.dy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(check(nx, ny) &amp;&amp; mp[nx][ny] != <span class="string">'*'</span> &amp;&amp; dist[nx][ny] &gt; dist[nod.dx][nod.dy] + <span class="number">1</span>) &#123;</span><br><span class="line">                dist[nx][ny] = dist[nod.dx][nod.dy] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || i == <span class="number">1</span>) que.push(node(nx, ny, nod.gay_l, nod.gay_r));</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">2</span> &amp;&amp; nod.gay_l &lt; x) que.push(node(nx, ny, nod.gay_l + <span class="number">1</span>, nod.gay_r));</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">3</span> &amp;&amp; nod.gay_r &lt; y) que.push(node(nx, ny, nod.gay_l, nod.gay_r + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; mp[i];</span><br><span class="line">        bfs(r - <span class="number">1</span>, c - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
  <entry>
    <title>牛客寒假算法基础集训营4</title>
    <url>/posts/debac4bf.html</url>
    <content><![CDATA[<h3 id="A-Applese-的取石子游戏"><a href="#A-Applese-的取石子游戏" class="headerlink" title="A.Applese 的取石子游戏"></a>A.Applese 的取石子游戏</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>Applese 和 Bpplese 在玩取石子游戏，规则如下：<br>一共有偶数堆石子排成一排，每堆石子的个数为 $ a_i $。两个人轮流取石子，Applese先手。每次取石子只能取最左一堆或最右一堆，且必须取完。最后取得的石子多者获胜。假设双方都足够聪明，最后谁能够获胜呢？</p>
</blockquote>
<a id="more"></a>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行是一个正偶数 n，表示石子的堆数。<br>第二行是 n 个正整数 $ a_1,a_2\cdots,a_n $，表示每堆石子的个数。</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个字符串“Applese”或“Bpplese”，表示胜者的名字。</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">2 3 3 3</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Applese</span><br></pre></td></tr></table></figure>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 2 \leq n \leq 10^5 $<br>$ 1 \leq a_i \leq 10^5 $<br>$\sum a_i $ 为奇数</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！题解：TAG：脑洞，博弈<br>这是一道经典的博弈问题。<br><del>可以使用动态规划来解决：dp[i][j]表示进行了 i 轮，从前面取走了 j 个时候的最大收益。这个老师上课的时候教过。</del><br>实际上，由于题面中的两个限制条件，可以得出先手有必胜策略：即选择所有的奇数项或者偶数项。如果奇数项的和较大，先手就取第一个，这样每一次轮到后手都只能取到偶数项。反之亦然同理。<br>因此，作为本场比赛的签到题之一，直接输出Applese即可通过。</p>
</blockquote>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n--) <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Applese"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Applese-走方格"><a href="#B-Applese-走方格" class="headerlink" title="B.Applese 走方格"></a>B.Applese 走方格</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>精通程序设计的 Applese 又写了一个游戏。在这个游戏中，它位于一个 n 行 m 列的方阵中的左上角（坐标为 $ (0, 0) $，行的序号为 $ 0 \sim n−1 $，列的序号为 $ 0 \sim m−1)$。<br>现在它想不重复地走过所有格子(除了起点)，最后回到左上角的一个方案。<br>每次只能往上下左右其中一个方向走一格。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>仅一行两个整数 n 和 m，表示方阵的大小。保证大于 $ 1×1 $。</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果存在方案，则输出一行操作，包含”L”、”R”、”U”、”D”，分别表示左、右、上、下。如果有多种方案，输出任意一种即可。如果没有方案，则在一行中输出”-1”。</p>
</blockquote>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2</span><br><span class="line"></span><br><span class="line">2 3</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RDLU</span><br><span class="line"></span><br><span class="line">RRDLLU</span><br></pre></td></tr></table></figure>
<h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n, m \leq 10 $.</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>做完签道题之后就开这题，一看数据很小，心里美滋滋，dfs深搜搞一搞，不过写丑了，输入 $ 8, 8 $ 之后就跑不出结果来QWQ，然后努力尝试着优化（未果），打标记发现递归在某一处进入死胡同，一直在那几个状态来回转移QWQ…..经过几个小时地挣扎之后，其实早已想到可以不用递归来解决，不过一直觉得可能是哪里没剪枝，相信只要设置一下条件……这是所有比赛以来第一次大胆尝试着用dfs写，回想当初学递归算法的时候，其实我的心里一直是抗拒的，日后的缺少训练导致现在比赛中不能轻易地AC掉某些很简单的题目，譬如本场比赛的 $ I $ 题QWQ，幸亏在队友的提示下，修改了一处（非递归）代码就AC了！感谢大佬！赛后看了一下用dfsAC的代码，果然是我写搓了，条件的构造真的太重要了！！！重新补了一下递归和模拟版（找一条固定路径）的解法。总结了一下，要多尝试，多思考，多做题！贴一下在比赛中自己缝缝补补的dfs：state：TLE！QWQ</p>
</blockquote>
<h4 id="TLE代码："><a href="#TLE代码：" class="headerlink" title="TLE代码："></a>TLE代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m; <span class="keyword">char</span> ans[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag, vis[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] =&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//下，上，左，右</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;=m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y, <span class="keyword">int</span> cnt, <span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(!check(x,y))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(now +<span class="number">1</span> == n*m)&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> vis[x][y]=<span class="literal">false</span>,now-=<span class="number">1</span>; <span class="comment">//到原点之后，若还未访问完其他坐标点，则当前已访问的个数减1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> dx = x + dir[i][<span class="number">0</span>], dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(check(dx,dy)&amp;&amp;!vis[dx][dy]) &#123;</span><br><span class="line">            vis[dx][dy]=<span class="literal">true</span>; <span class="comment">//先标记为true</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) ans[cnt]=<span class="string">'D'</span>; <span class="comment">//下</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)ans[cnt]= <span class="string">'U'</span>; <span class="comment">//上</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)ans[cnt] =<span class="string">'L'</span>; <span class="comment">//左</span></span><br><span class="line">            <span class="keyword">else</span> ans[cnt] = <span class="string">'R'</span>; <span class="comment">//右</span></span><br><span class="line">            dfs(dx,dy,cnt+<span class="number">1</span>,now+<span class="number">1</span>);</span><br><span class="line">            vis[dx][dy] = <span class="literal">false</span>; <span class="comment">//返回时标记为false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码1："><a href="#AC代码1：" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="keyword">bool</span> flag, vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;<span class="comment">//下，右，上，左</span></span><br><span class="line"><span class="keyword">char</span> fuck[<span class="number">5</span>] = <span class="string">"DRUL"</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">string</span> ans)</span> </span>&#123; <span class="comment">//坐标：(x, y)，答案：字符串ans</span></span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span> &amp;&amp; n * m == (<span class="keyword">int</span>)ans.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>; <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> dx = x + dir[i][<span class="number">0</span>], dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(check(dx,dy) &amp;&amp; !vis[dx][dy]) &#123;</span><br><span class="line">            vis[dx][dy] = <span class="literal">true</span>; <span class="comment">//先尝试着访问该坐标点</span></span><br><span class="line">            dfs(dx, dy, ans + fuck[i]);</span><br><span class="line">            vis[dx][dy] = <span class="literal">false</span>; <span class="comment">//回溯时标记为未访问状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n * m % <span class="number">2</span>) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">continue</span>;&#125; <span class="comment">//剪枝</span></span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2："><a href="#AC代码2：" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> &amp;&amp; m == <span class="number">2</span>) &#123;<span class="built_in">puts</span>(<span class="string">"RL"</span>); <span class="keyword">continue</span>;&#125; <span class="comment">//2种特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span> &amp;&amp; m == <span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"DU"</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>((n * m % <span class="number">2</span>) || (n == <span class="number">1</span> || m == <span class="number">1</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">continue</span>;&#125; <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">//按偶数行构造固定路径</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"D"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"R"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">2</span>; --j) <span class="built_in">printf</span>(<span class="string">"L"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(i != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"U"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m - <span class="number">1</span>; ++j) <span class="built_in">printf</span>(<span class="string">"R"</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"U"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">//否则按偶数列构造固定路径</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m; ++j) <span class="built_in">printf</span>(<span class="string">"R"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"D"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">2</span>; --i) <span class="built_in">printf</span>(<span class="string">"U"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(j != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"L"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"U"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; ++i) <span class="built_in">printf</span>(<span class="string">"D"</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"L"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Applese-走迷宫"><a href="#C-Applese-走迷宫" class="headerlink" title="C.Applese 走迷宫"></a>C.Applese 走迷宫</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>精通程序设计的 Applese 双写了一个游戏。<br>在这个游戏中，它被困在了一个 n×m 的迷宫中，它想要逃出这个迷宫。<br>在迷宫中，有一些方格是水池，只有当 Applese 处于水属性的时候才可以通过；有一些方格是岩浆，只有当 Applese 是火属性的时候可以通过；有一些方格是墙壁，无论如何都无法通过；另一些格子是空地（包括起点和终点），可以自由通过。<br><code>在一些空地上有神秘道具可以让 Applese 转换自己的属性（从水属性变为火属性或从火属性变为水属性，需要一个单位的时间）</code>。<br>已知 Applese 在一个单位的时间内可以朝四个方向行走一格，且开始处于水属性，位于空地的道具拾取后只能在该处立即使用（或者不使用），且可以多次使用。求它走出迷宫需要的最少时间。</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个正整数 n, m 表示迷宫的大小。<br>接下来 n 行，每行长度为 m 的字符串。描述地图。<br>其中 ‘S’ 表示起点，’T’ 表示终点，’.’ 表示空地，’w’表示岩浆，’~’表示水池，’@’ 表示道具，’#’表示障碍。<br>保证地图中的起点和终点只有一个，道具都位于空地。</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个整数，表示 Applese 走出迷宫的最短时间。特别地，如果 Applese 走不出迷宫，输出 “-1”。</p>
</blockquote>
<h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">.w@..</span><br><span class="line">.S#..</span><br><span class="line">~w#..</span><br><span class="line">.w..~</span><br><span class="line">@w.~T</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n, m \leq 100 $.</p>
</blockquote>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>典型的bfs求最短路。由于题目多加了一个状态：水、火，故求最短路也要多加一维，0：水，1：火。注意一个坑：某坐标点有道具，若有必要使用道具改变属性，则需在原地花费一个单位时间进行转化。</p>
</blockquote>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, sx, sy, tx, ty, ans, dist[maxn][maxn][<span class="number">2</span>], dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, state;</span><br><span class="line">    node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _state) : x(_x), y(_y), state(_state) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= n || y &gt;= m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</span><br><span class="line">    que.push(node(x, y, state));</span><br><span class="line">    dist[x][y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        node nod = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> dx = nod.x + dir[i][<span class="number">0</span>], dy = nod.y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(check(dx, dy) &amp;&amp; mp[dx][dy] != <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!nod.state &amp;&amp; mp[dx][dy] == <span class="string">'w'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(nod.state &amp;&amp; mp[dx][dy] == <span class="string">'~'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(dist[dx][dy][nod.state] &gt; dist[nod.x][nod.y][nod.state] + <span class="number">1</span>) &#123;</span><br><span class="line">                    dist[dx][dy][nod.state] = dist[nod.x][nod.y][nod.state] + <span class="number">1</span>;</span><br><span class="line">                    que.push(node(dx, dy, nod.state));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mp[dx][dy] == <span class="string">'@'</span> &amp;&amp; dist[dx][dy][nod.state ^ <span class="number">1</span>] &gt; dist[dx][dy][nod.state] + <span class="number">1</span>) &#123; <span class="comment">//若当前是道具，并且状态改变可以使得从起点到达该坐标点的最短路更短，则应该更新状态改变后对应的最短路，同时当前坐标点入队</span></span><br><span class="line">                    dist[dx][dy][nod.state ^ <span class="number">1</span>] = dist[dx][dy][nod.state] + <span class="number">1</span>;</span><br><span class="line">                    que.push(node(dx, dy, nod.state ^ <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; mp[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'S'</span>) sx = i, sy = j;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">'T'</span>) tx = i, ty = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">        bfs(sx, sy, <span class="number">0</span>);</span><br><span class="line">        ans = <span class="built_in">min</span>(dist[tx][ty][<span class="number">0</span>], dist[tx][ty][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(ans == inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Applese-涂颜色"><a href="#E-Applese-涂颜色" class="headerlink" title="E.Applese 涂颜色"></a>E.Applese 涂颜色</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>精通程序设计的 Applese 叕写了一个游戏。<br>在这个游戏中，有一个 n 行 m 列的方阵。现在它要为这个方阵涂上黑白两种颜色。<code>规定左右相邻两格的颜色不能相同</code>。请你帮它统计一下有多少种涂色的方法。由于答案很大，你需要将答案对 $ 10^9 + 7 $ 取模。</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>仅一行两个正整数 n, m，表示方阵的大小。</p>
</blockquote>
<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个正整数，表示方案数对 $10^9 + 7 $ 取模。</p>
</blockquote>
<h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line"></span><br><span class="line">2 2</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h4 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n,m \leq 10^{100000} $.</p>
</blockquote>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>由于左右相邻两格的颜色不能相同，那么无论m是多少，每一行只有两种确定的填充状态，而每一行的状态又可以互相组合，所以答案就是 $ 2^n \% (10^9 + 7) $。由于n超大，并且2 与大质数 $ 1e9 + 7 $ 互质，所以要用扩展欧拉定理对指数降幂再用快速幂求解，公式： $ a ^ b \equiv a^{ b \% \varphi(p)} \;(mod \; p), \gcd(a, p) = 1 $。感想：赛后看了一下18级的通过率，本以为榜单中这题应该是全部绿色的，没想到才过了一半QWQ，看来有待加强训练。比赛前一整天就在机房里给ACM协会成员讲了数论四大定理（包括公式的由来及证明），次日比赛就用到了。从前几场比赛来看，都涉及了一些数论知识，日后要加强数学和思维方面的训练，ACM数学和思维真的很重要！！！</p>
</blockquote>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL k, phi; <span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2)&#123;</span><br><span class="line">        k = <span class="number">0L</span>L;</span><br><span class="line">        phi = mod - <span class="number">1L</span>L;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s1[i]; ++i) k = (k * <span class="number">10</span> + s1[i] - <span class="string">'0'</span>) % phi;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; quick_mod(<span class="number">2L</span>L, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="F-Applese-的QQ群"><a href="#F-Applese-的QQ群" class="headerlink" title="F.    Applese 的QQ群"></a>F.    Applese 的QQ群</h3><h4 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>Applese 有一个QQ群。在这个群中，大家互相请教问题。如 b 向 a 请教过问题，就把 a 叫做是 b 的”老板”。这样一个群中就会有很多老板。<br>同时规定：如果 a 是 b 的老板，b 是 c 的老板，那么 a 也是 c 的老板。<br>为了不破坏群里面和谐交流的氛围，Applese 定了一个群规：不允许出现 a 既是 b 的老板， b 又是 a 的老板。<br>你需要帮助 Applese 判断大家是否遵守了群规。</p>
</blockquote>
<h4 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行两个整数 n, m，表示群里的人数以及请教问题的数量。<br>接下来 m 行，每行两个整数 a, b，表示 a 是 b 的”老板”，即 b 向 a 请教了一个问题。<br>注：无论是否违反了群规，a 都会成为 b 的老板。</p>
</blockquote>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>对于每次提问，输出一行”Yes”表示大家都遵守了群规，反之输出”No”。</p>
</blockquote>
<h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure>
<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br></pre></td></tr></table></figure>
<h4 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ 1 \leq n \leq 10^5 $<br>$ 1 \leq m \leq 2 \cdot 10^5 $<br>$ 1 \leq a, b \leq n $</p>
</blockquote>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>一开始想用并查集，但样例中第四个输出是”No”，并且由于并查集是无向的，即已归并集合中元素之间的关系不能确定，所以用并查集的做法肯定是错的！显然这题要判断是否存在环，若存在环，即违反了群规，则之后每一次提问的输出都是”No”。正解：dfs或拓扑排序判环。由于不存在撤销操作，可以发现答案一定是一连串的Yes后再有一连串的No，所以只需二分最后一个Yes的位置即可。注意：dfs前应该建一条从b指向a老板（因为老板可能有很多个属下，若这样建图则多出了遍历儿子的时间，交一发超时，相反属下最多只有一个老板），然后dfs时，一路沿着儿子的父亲往上走，若找到已和当前相同的节点，则返回true，否则返回false。</p>
</blockquote>
<h4 id="AC代码1：-1"><a href="#AC代码1：-1" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b; <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> son, <span class="keyword">int</span> per)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; vec[son].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vec[son][i] == per) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//若son的父亲是per，则返回true，表示找到环</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dfs(vec[son][i], per)) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//否则若son的父亲的父亲......和per相同，则返回true，也表示找到环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) vec[i].<span class="built_in">clear</span>();</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(flag || dfs(a, b)) &#123; <span class="comment">//从节点a去找，若找到其父亲为b，说明存在环</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>), vec[b].push_back(a); <span class="comment">//建一条从属下b指向老板a的边</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2：-1"><a href="#AC代码2：-1" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b, lt, rt, mid, x, y, cnt, indeg[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line">    EDGE(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v) : from(_u), to(_v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;EDGE&gt; edges;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</span><br><span class="line">    <span class="built_in">memset</span>(indeg, <span class="number">0</span>, <span class="keyword">sizeof</span>(indeg)); cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) vec[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= up; ++i) vec[edges[i].from].push_back(edges[i].to), ++indeg[edges[i].to];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!indeg[i]) que.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        x = que.front(), que.pop(), cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; vec[x].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="keyword">if</span>(--indeg[vec[x][j]] == <span class="number">0</span>) que.push(vec[x][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt == n; <span class="comment">//若拓扑点的个数cnt与n相同，则说明当前图中不存在环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        edges.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            edges.push_back(EDGE(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">        lt = <span class="number">0</span>, rt = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(lt &lt;= rt) &#123; <span class="comment">//跳出时是 ans = lt - 1</span></span><br><span class="line">            mid = (lt + rt) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) lt = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> rt = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lt; ++i) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lt; i &lt; m; ++i) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-Applese-的毒气炸弹"><a href="#G-Applese-的毒气炸弹" class="headerlink" title="G.Applese 的毒气炸弹"></a>G.Applese 的毒气炸弹</h3><h4 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>众所周知，Applese 是个很强的选手，它的化学一定很好。今天他又AK了一套题觉得很无聊，于是想做个毒气炸弹玩。毒气炸弹需要 k 种不同类型元素构成，Applese一共有 n 瓶含有这些元素的试剂。<br>已知元素混合遵循 m 条规律，每一条规律都可以用 “x y c” 描述。<br>表示将第 x 瓶试剂混入第 y 瓶试剂或者把第 y 瓶试剂混入第 x 瓶试剂，需要消耗 c 的脑力。特别地，除了这 m 条规律外，Applese 可以将任意两瓶相同元素的试剂混合，且不需要消耗脑力。<br>Applese 想要配出毒气炸弹，就需要使 S 中含有 $ 1 \sim k $ 这 k 种元素。它想知道自己最少花费多少脑力可以把毒气炸弹做出来。</p>
</blockquote>
<h4 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>第一行为三个整数 n, m, k 表示 Applese 拥有的试剂的数量，混合规律的数量和所需的元素种类数。<br>第二行为 n 个整数 $ a_1,a_2,\cdots,a_n $，分别表示每一瓶试剂的元素类型。<br>接下来m行，每行三个整数 x, y, c，含义如题目描述中所述。不保证 x, y的试剂种类不同。</p>
</blockquote>
<h4 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个正整数表示最小的耗费脑力。特别地，如果无法合成出毒气炸弹，输出 “-1”。</p>
</blockquote>
<h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8 2</span><br><span class="line">1 1 1 2 2 2</span><br><span class="line">1 2 1</span><br><span class="line">2 3 2</span><br><span class="line">1 3 3</span><br><span class="line">3 4 6</span><br><span class="line">4 5 1</span><br><span class="line">4 6 3</span><br><span class="line">5 6 2</span><br><span class="line">1 6 2</span><br></pre></td></tr></table></figure>
<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq n,k,m \leq 10^5 $<br>$ 1 \leq x, y \leq n, x \neq y $<br>$ 1 \leq c \leq 10^9 $</p>
</blockquote>
<h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>把相同元素类型的试剂看作一个节点，然后用克鲁斯卡尔求刚好由k个点（k种元素配置毒气炸弹）组成的最小生成树，若不能找到，则输出-1。这题真的好简单QWQ。</p>
</blockquote>
<h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, x, y, z, cnt, a[maxn], fa[maxn]; LL ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span><span class="keyword">int</span> from, to, val;&#125;edge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(EDGE gax, EDGE gay)</span> </span>&#123;<span class="keyword">return</span> gax.val &lt; gay.val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = find_fa(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    u = find_fa(u), v = find_fa(v);</span><br><span class="line">    <span class="keyword">if</span>(u != v) fa[u] = v, ans += w, cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kurskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line">    ans = <span class="number">0L</span>L; cnt = <span class="number">1</span>;</span><br><span class="line">    sort(edge, edge + m, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        unite(edge[i].from, edge[i].to, edge[i].val);</span><br><span class="line">        <span class="keyword">if</span>(cnt == k) <span class="keyword">break</span>; <span class="comment">//只需选择k种元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == k) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i]; <span class="comment">// 注意：试剂瓶编号为1~n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            edge[i].from = a[x], edge[i].to = a[y], edge[i].val = z; <span class="comment">//建边：元素到元素的关系</span></span><br><span class="line">        &#125;</span><br><span class="line">        kurskal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-Applese-的回文串"><a href="#I-Applese-的回文串" class="headerlink" title="I.Applese 的回文串"></a>I.Applese 的回文串</h3><h4 id="题目描述：-6"><a href="#题目描述：-6" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>自从 Applese 学会了字符串之后，精通各种字符串算法，比如……判断一个字符串是不是回文串。<br>这样的题目未免让它觉得太无聊，于是它想到了一个新的问题。如何判断一个字符串在任意位置(包括最前面和最后面)插入一个字符后能不能构成一个回文串？</p>
</blockquote>
<h4 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>仅一行，为一个由字母和数字组成的字符串 s。</p>
</blockquote>
<h4 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>如果在插入一个字符之后可以构成回文串，则输出”Yes”, 否则输出”No”。</p>
</blockquote>
<h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applese</span><br><span class="line"></span><br><span class="line">java</span><br></pre></td></tr></table></figure>
<h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line"></span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>
<h4 id="备注：-3"><a href="#备注：-3" class="headerlink" title="备注："></a>备注：</h4><blockquote>
<p>$ |s| \leq 10^5 $. </p>
</blockquote>
<h4 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>dfs简单过QWQ！题目要求插入一个字符后能否构成一个回文串，换个角度也就是删除任意一个字符能否构成一个回文串。因为删除的字符只有一个，且当删除字符的个数大于1，很快被return掉，所以用dfs可以简单快速求解！以后要多学学dfs的技能姿势QWQ！<br>题解：可以认为插入和删除是等价的操作。想到这一点，这题就会好做很多。如果这个串本身就是回文串，答案一定是Yes。否则我们只需要考虑串中对称的位置不相等的两个字符，分别尝试把它们删掉后判断一下是不是回文的就行了。<br>总结：的确，我们只需判断三次就能确定答案，因为第一个不同的地方有两种情况，尝试着删除第一个不同位置的两个字符中任意一个，若删后能构成一个回文串，显然是满足条件的，否则肯定不能构成一个回文串。好一个思维题！</p>
</blockquote>
<h4 id="AC代码1：-2"><a href="#AC代码1：-2" class="headerlink" title="AC代码1："></a>AC代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn]; <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag || cnt &gt; <span class="number">1</span>) <span class="keyword">return</span>; <span class="comment">// 若已找到，或者要删除的字符个数大于1，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(st &gt;= ed) &#123;flag = <span class="literal">true</span>; <span class="keyword">return</span>;&#125; <span class="comment">//注意是大于等于，</span></span><br><span class="line">    <span class="keyword">if</span>(str[st] != str[ed]) &#123;</span><br><span class="line">        dfs(st + <span class="number">1</span>, ed, cnt + <span class="number">1</span>); <span class="comment">//尝试着删除左指针指向的字符，删除个数加1</span></span><br><span class="line">        dfs(st, ed - <span class="number">1</span>, cnt + <span class="number">1</span>); <span class="comment">//尝试着删除右指针指向的字符，删除个数加1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> dfs(st + <span class="number">1</span>, ed - <span class="number">1</span>, cnt); <span class="comment">//否则继续往两边搜</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="built_in">strlen</span>(str) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">puts</span>(flag ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AC代码2：-2"><a href="#AC代码2：-2" class="headerlink" title="AC代码2："></a>AC代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">string</span> s1, s2, s3; <span class="keyword">int</span> diff;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> pat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = pat.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; ++i, --j)</span><br><span class="line">        <span class="keyword">if</span>(pat[i] != pat[j]) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s1) &#123;</span><br><span class="line">        s2 = s3 = s1;</span><br><span class="line">        diff = check(s1); </span><br><span class="line">        <span class="keyword">if</span>(diff == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>;&#125; </span><br><span class="line">        s2 = s2.erase(diff, <span class="number">1</span>); </span><br><span class="line">        s3 = s3.erase(s1.<span class="built_in">size</span>() - diff - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(check(s2) == <span class="number">-1</span> || check(s3) == <span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J-Applese-的减肥计划"><a href="#J-Applese-的减肥计划" class="headerlink" title="J.Applese 的减肥计划"></a>J.Applese 的减肥计划</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h4><blockquote>
<p>Applese 最近又长胖了，于是它打算减肥——练习举重。<br>他在举重的时候用两只手往不同方向用力，从而把杠铃举起来。<br>已知 Applese 两只手分别产生的力的大小，以及它们之间的夹角，试求两力合力的大小。</p>
</blockquote>
<h4 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>仅一行三个整数 $ f_1,f_2,a$，分别表示两只手产生的力的大小以及它们之间的夹角。</p>
</blockquote>
<h4 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出一个实数表示两力合力的大小，要求相对误差或绝对误差不超过 $ 10^{-6} $。<br>严格来讲，如果你的答案是 a，而标准答案是 b，那么当 $ \frac{|a-b|}{max{1,|b|}} \leq 10^{-6} $ 时，你的答案会被认为是正确的。</p>
</blockquote>
<h4 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8 90</span><br><span class="line"></span><br><span class="line">10 10 60</span><br></pre></td></tr></table></figure>
<h4 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.0000000000</span><br><span class="line"></span><br><span class="line">17.3205080757</span><br></pre></td></tr></table></figure>
<h4 id="备注-3"><a href="#备注-3" class="headerlink" title="备注:"></a>备注:</h4><blockquote>
<p>$ 1 \leq f_1,f_2 \leq 100 $<br>$ 0 \leq a \leq 180 $</p>
</blockquote>
<h4 id="思路：-7"><a href="#思路：-7" class="headerlink" title="思路："></a>思路：</h4><blockquote>
<p>签道题！根据余弦定理：$ cosA = \frac{b^2 + c^2 - a^2}{2bc} $ 可得 $ F = \sqrt{f_1^2 + f_2^2 + 2f_1 f_2 cos \alpha }$.<br>注意 $ \alpha $ 是弧度制，即 $1^{\circ} = \frac{\pi }{180} rad $。</p>
</blockquote>
<h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">double</span> f1, f2, a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; f1 &gt;&gt; f2 &gt;&gt; a)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; <span class="built_in">sqrt</span>(f1 * f1 + f2 * f2 + <span class="number">2.0</span> * f1 * f2 * <span class="built_in">cos</span>(a * pi / <span class="number">180.0</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客竞赛</category>
      </categories>
  </entry>
</search>
